/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 12:08:36 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.ParameterizedTypeFixtures;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(43);
      LocalDate localDate0 = MockLocalDate.now();
      gson0.toJson((Object) localDate0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.toJsonTree((Object) atomicLongArray0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      Gson gson1 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(1L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      Class<Double> class1 = Double.class;
      gson1.fromJson(jsonElement0, (Class<?>) class1);
      Class<Short> class2 = Short.class;
      TypeToken<Short> typeToken1 = TypeToken.get(class2);
      gson1.getAdapter(typeToken1);
      Gson gson2 = new Gson();
      Class<Byte> class3 = Byte.class;
      gson2.newBuilder();
      gson1.fromJson((JsonElement) null, (Class<?>) class3);
      Gson gson3 = new Gson();
      // Undeclared exception!
      try { 
        gson3.toJson((Object) class3, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson("9=3", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      gson0.fromJson((JsonElement) null, class0);
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(44);
      gson0.toJson((Object) atomicLongArray0);
      String string0 = gson0.toJson((Object) atomicLongArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson(string0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java.lang.Long@0000000025\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson("dom.googe.gsoD.Gson$4", (Type) class0);
      JsonArray jsonArray0 = new JsonArray();
      Integer integer0 = new Integer((-4483));
      jsonArray0.add((Number) integer0);
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class1);
      gson0.toJson((Object) atomicLongArray0, (Type) class1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dom.googe.gsoD.Gson$4");
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((long) (-4483));
      // Undeclared exception!
      try { 
        jsonWriter1.value("hKPFj");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      String string0 = "NtCt$8O/$1<";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.toString();
      // Undeclared exception!
      try { 
        Charset.forName("com.google.gson.Gson$FutureTypeAdapter");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson(jsonReader0, (Type) class0);
      gson0.toString();
      gson0.toJson((Object) null);
      gson0.htmlSafe();
      boolean boolean0 = Gson.DEFAULT_ESCAPE_HTML;
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "com.google.gson.JsonPrimitive");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      Gson gson1 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(1L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      Class<Double> class1 = Double.class;
      gson1.fromJson(jsonElement0, (Class<?>) class1);
      Gson gson2 = new Gson();
      Class<Byte> class2 = Byte.class;
      gson1.fromJson((JsonElement) null, (Class<?>) class2);
      Gson gson3 = new Gson();
      // Undeclared exception!
      try { 
        gson3.toJson((Object) class2, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(58);
      gson0.toJson((Object) atomicLongArray0);
      gson0.htmlSafe();
      boolean boolean0 = Gson.DEFAULT_COMPLEX_MAP_KEYS;
      Character character0 = new Character(' ');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(charArrayWriter0);
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.isJsonNull();
      jsonObject0.get(",instanceCreators:");
      jsonObject0.add("A2'6LCR6f`Bm", (JsonElement) null);
      jsonObject0.getAsJsonPrimitive((String) null);
      Class<Long> class0 = Long.class;
      gson0.fromJson((JsonElement) null, class0);
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0, (Appendable) charArrayWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Short. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(389L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      Class<Date> class0 = Date.class;
      try { 
        gson0.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 389
         //
         verifyException("com.google.gson.internal.bind.DateTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint(0.0);
      PipedReader pipedReader0 = new PipedReader(2);
      gson0.newJsonReader(pipedReader0);
      BigInteger bigInteger0 = BigInteger.ONE;
      gson0.toJson((Object) bigInteger0);
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.fromJson("", (Type) class0);
      Class<Short> class1 = Short.TYPE;
      Gson gson1 = new Gson();
      Float float0 = new Float((float) (short)1130);
      Gson gson2 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong((-1242L));
      gson2.toJson((Object) atomicLong0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?>J(K/ML?VTSmXZA");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "?>J(K/ML?VTSmXZA");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ?>J(K/ML?VTSmXZA
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Gson gson4 = new Gson();
      Gson gson5 = new Gson();
      Character character0 = new Character('%');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson4.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"%\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray((short)1130);
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      Class<Type> class0 = Type.class;
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray1, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      short short0 = (short) (-742);
      Short short1 = new Short((short) (-742));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(short1);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(2);
      gson0.newJsonReader(pipedReader0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float((float) 2);
      gson0.toJson((Object) null);
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson$2", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("`?~dc'C94");
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"`?~dc'C94\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(2);
      gson0.newJsonReader(pipedReader0);
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("('+*eIYmOZvrZd", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"('+*eIYmOZvrZd\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      HashMap<Type, InstanceCreator<BigInteger>> hashMap0 = new HashMap<Type, InstanceCreator<BigInteger>>();
      gson0.htmlSafe();
      MathContext mathContext0 = MathContext.DECIMAL128;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      Float float0 = new Float(976.33659862712);
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.toJson((Object) float0, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      gson0.htmlSafe();
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double((-1.0));
      Float float0 = new Float((-1.0F));
      gson0.toJson((Object) bigDecimal0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      gson0.htmlSafe();
      Class<Double> class0 = Double.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Class<?>) class0);
      Class<String> class1 = String.class;
      gson0.getAdapter(class1);
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Class<String> class2 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class2);
      gson0.getAdapter(typeToken0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      mockFileWriter0.write(123);
      gson0.newJsonWriter(mockFileWriter0);
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<Gson.FutureTypeAdapter<Excluder>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Date> class0 = Date.class;
      gson0.getAdapter(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      gson0.htmlSafe();
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double((-1.0));
      gson0.toJson((Object) double0, (Type) class0);
      gson0.serializeNulls();
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Short> class0 = Short.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      MockFile mockFile0 = new MockFile("2T'_", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 55);
      JsonWriter jsonWriter0 = new JsonWriter(bufferedWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<Type> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Type>();
      gson0.toJson((Object) gson_FutureTypeAdapter1);
      gson0.toJsonTree((Object) null);
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      gson0.getAdapter(class0);
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(true);
      Float float0 = new Float(0.0);
      Float.min((-920.039F), (-1835.4F));
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write(jsonWriter0, float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      HashMap<Type, InstanceCreator<BigInteger>> hashMap0 = new HashMap<Type, InstanceCreator<BigInteger>>();
      Class<Byte> class0 = Byte.TYPE;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = new JsonArray();
      JsonArray jsonArray2 = new JsonArray();
      jsonArray2.add((JsonElement) jsonArray1);
      JsonArray jsonArray3 = jsonArray1.deepCopy();
      JsonArray jsonArray4 = jsonArray3.getAsJsonArray();
      try { 
        gson0.toJson((JsonElement) jsonArray4, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      gson0.toJsonTree((Object) null);
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Byte> class0 = Byte.class;
      gson2.fromJson((JsonElement) jsonNull0, (Class<?>) class0);
      Class<String> class1 = String.class;
      TypeAdapter<String> typeAdapter0 = gson2.getAdapter(class1);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      StringReader stringReader0 = new StringReader("$(=)#fGiSVeEw`g3ON0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J;_");
      stringReader0.mark(37);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson("dom.googe.gsoD.Gson$4", (Type) class0);
      JsonArray jsonArray0 = new JsonArray();
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class1);
      gson0.toJson((Object) atomicLongArray0, (Type) class1);
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) bigDecimal0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigDecimal cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        gson1.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = null;
      gson0.toJson((JsonElement) null);
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$2");
      Class<Object> class0 = Object.class;
      gson0.fromJson((Reader) stringReader0, class0);
      gson0.serializeNulls();
      Class<Long> class1 = Long.class;
      gson0.getAdapter(class1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("null");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "com.google.gson.Gson$2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      gson0.newJsonWriter(mockPrintWriter0);
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      gson0.htmlSafe();
      Class<Integer> class2 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeAdapter0, (Type) class2, (Appendable) printStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.bind.ObjectTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Gson.checkValidFloatingPoint(1.0);
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<InstanceCreator<Long>>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<InstanceCreator<Long>>>();
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<AtomicLong>();
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[4];
      intArray0[0] = 1845;
      intArray0[1] = (-3979);
      intArray0[2] = (-849);
      intArray0[3] = 1924;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(true, true);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, true, true);
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder4 = excluder3.disableInnerClassSerialization();
      Excluder excluder5 = excluder4.withVersion((-3188.0));
      Gson gson1 = new Gson();
      Class<Float> class0 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class0);
      excluder5.create(gson1, (TypeToken<?>) typeToken0);
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken1 = TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder5, typeToken1);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.isJsonNull();
      jsonObject0.isJsonPrimitive();
      jsonObject0.isJsonArray();
      jsonObject0.isJsonObject();
      jsonObject0.getAsJsonObject("}");
      Class<Object> class2 = Object.class;
      gson1.fromJson((JsonElement) null, class2);
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Date> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Date>();
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      Gson gson1 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize byte
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) float0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      typeToken0.getType();
      Gson gson1 = new Gson();
      Class<Double> class1 = Double.class;
      Class<Short> class2 = Short.class;
      TypeToken<Short> typeToken1 = TypeToken.get(class2);
      gson1.getAdapter(typeToken1);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (Appendable) stringWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson$3", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Short> class0 = Short.TYPE;
      Class<Boolean> class1 = Boolean.TYPE;
      try { 
        gson0.fromJson("*}%O2:S$N#N}tD&r", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      gson0.htmlSafe();
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.negate(mathContext0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((Object) bigDecimal0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toJson((Object) gson0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double((-1.0));
      Gson gson0 = new Gson();
      Class<Type> class1 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("V~", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson("KPi/-4Edu6", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-1260.9));
      Class<Float> class0 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, type0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      Float float0 = new Float(3932.02F);
      Float.sum(1.0F, 0.0F);
      gson0.toJsonTree((Object) float0);
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "9rx&+{I|L;<*$AN";
      String string1 = "|a*";
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("|a*", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder0.disableInnerClassSerialization();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      excluder1.excludeClass(class0, false);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, (TypeToken<Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      TypeToken<Integer> typeToken0 = null;
      Long long0 = new Long(0L);
      try { 
        Long.parseUnsignedLong("[)-$r1(SbPl@v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[)-$r1(SbPl@v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Float> class0 = Float.TYPE;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("FHLNUg,P&F", "FHLNUg,P&F");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // FHLNUg,P&F
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson1 = new Gson();
      MockFileWriter mockFileWriter0 = new MockFileWriter("year", true);
      gson1.toJson((Object) null, (Appendable) mockFileWriter0);
      gson1.newBuilder();
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      gson0.toJson((Object) float0);
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Float float0 = new Float((-2707.6));
      assertEquals((-2707.6F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("Expected END_ARRAY but was ");
      assertNotNull(mockFileWriter0);
      
      boolean boolean0 = Float.isFinite(161.19F);
      assertTrue(boolean0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockFileWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setHtmlSafe(true);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      gson0.toJson((Object) float0, (Type) class0, jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      gson0.toJsonTree((Object) jsonReader0);
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      
      Class<String> class1 = String.class;
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(class1);
      assertNotSame(gson0, gson1);
      assertFalse(gson0.equals((Object)gson1));
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<String>();
      assertNotNull(gson_FutureTypeAdapter1);
      
      TypeAdapter<String> typeAdapter1 = new Gson.FutureTypeAdapter<String>();
      assertFalse(typeAdapter1.equals((Object)typeAdapter0));
      assertNotNull(typeAdapter1);
      
      try { 
        gson1.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("bO9h\"+", class0);
      assertEquals("bO9h\"+", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Long> class0 = Long.class;
      Long long0 = gson0.fromJson("", class0);
      assertNull(long0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      gson0.toJson((Object) pipedReader0);
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      String string0 = gson0.toJson((Object) gson_FutureTypeAdapter0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) "{}");
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" is not a valid double value as per JSON specification. To override this");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) " is not a valid double value as per JSON specification. To override this";
      objectArray0[3] = (Object) null;
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.withVersion(847.7681309804846);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      assertNotNull(mockExclusionStrategy0);
      
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, false, true);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder0);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder0));
      assertNotNull(excluder2);
      
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      HashMap<Type, InstanceCreator<String>> hashMap0 = new HashMap<Type, InstanceCreator<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      gson0.toJson((Object) "{}", (Appendable) mockPrintWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      assertNotNull(jsonNull0);
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonArray());
      assertTrue(jsonNull0.isJsonNull());
      
      Object object0 = gson0.fromJson((JsonElement) jsonNull0, (Class<?>) class0);
      assertNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonArray());
      assertTrue(jsonNull0.isJsonNull());
      
      Class<String> class1 = String.class;
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(class1);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Class<String> class2 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class2);
      assertSame(class2, class1);
      assertNotNull(typeToken0);
      
      TypeAdapter<String> typeAdapter1 = gson0.getAdapter(typeToken0);
      assertSame(class2, class1);
      assertSame(typeAdapter1, typeAdapter0);
      assertNotNull(typeAdapter1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter1);
      assertSame(class2, class1);
      assertSame(typeAdapter1, typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      assertNotNull(mockFileWriter0);
      
      mockFileWriter0.write(123);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockFileWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      int int0 = 0;
      int int1 = 1;
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      Excluder excluder2 = excluder0.withModifiers(intArray0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder0);
      assertArrayEquals(new int[] {1, 1, 1, 0, 1, 1, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder0));
      assertNotNull(excluder2);
      
      HashMap<Type, InstanceCreator<BigInteger>> hashMap0 = new HashMap<Type, InstanceCreator<BigInteger>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TypeToken<Byte> typeToken0 = (TypeToken<Byte>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, class0);
      assertNotNull(atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      assertEquals("[]", atomicLongArray0.toString());
      assertEquals(0, atomicLongArray0.length());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      ByteBuffer byteBuffer0 = uS_ASCII0.encode("");
      assertNotNull(byteBuffer0);
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      
      CharBuffer charBuffer0 = uS_ASCII0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hx*kL`Q+|Wk$7AmT7c;", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(printWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      gson0.toJson((JsonElement) null, jsonWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      TypeAdapter<Byte> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotSame(excluder0, excluder1);
      assertFalse(excluder0.equals((Object)excluder1));
      assertNotNull(typeAdapter0);
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      
      String string0 = gson0.toJson((Object) null, (Type) class0);
      assertEquals("null", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<Integer> class1 = Integer.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Short> class0 = Short.class;
      BigDecimal bigDecimal0 = new BigDecimal((-9223372036854775808L));
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      Class<String> class1 = String.class;
      String string0 = gson0.fromJson((JsonElement) jsonPrimitive0, class1);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Short> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Object object0 = gson0.fromJson("com.google.gson.Gson$5", (Type) class1);
      assertEquals("com.google.gson.Gson$5", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = "\\Q@qS,~&@yf yRg";
      Class<Long> class0 = Long.class;
      Long long0 = gson0.fromJson("", class0);
      assertNull(long0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      try { 
        Integer.valueOf(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonObject());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(32, charBuffer0.remaining());
      assertEquals(32, charBuffer0.capacity());
      assertEquals(32, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(32, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      
      CharBuffer charBuffer1 = charBuffer0.append('W');
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(31, charBuffer0.remaining());
      assertEquals(32, charBuffer0.capacity());
      assertEquals(32, charBuffer0.limit());
      assertEquals(31, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(31, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(31, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(32, charBuffer1.limit());
      assertEquals(1, charBuffer1.position());
      assertEquals(32, charBuffer1.capacity());
      
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertNotNull(charBuffer2);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(31, charBuffer0.remaining());
      assertEquals(32, charBuffer0.capacity());
      assertEquals(32, charBuffer0.limit());
      assertEquals(31, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertTrue(charBuffer2.isReadOnly());
      assertEquals(31, charBuffer2.remaining());
      assertEquals(31, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertEquals(31, charBuffer2.capacity());
      assertEquals(31, charBuffer2.length());
      assertFalse(charBuffer2.hasArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (Appendable) charBuffer2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      
      try { 
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) fieldNamingStrategy0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      charArrayWriter0.write(2863);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\u0B2F", charArrayWriter0.toString());
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\u0B2F", charArrayWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      jsonWriter0.setSerializeNulls(true);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("\u0B2F", charArrayWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      
      Class<Excluder> class1 = Excluder.class;
      Class<Excluder> class2 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class2);
      assertSame(class2, class1);
      assertNotNull(typeToken0);
      
      TypeToken<Excluder> typeToken1 = TypeToken.get(class1);
      assertSame(class1, class2);
      assertNotSame(typeToken1, typeToken0);
      assertTrue(typeToken1.equals((Object)typeToken0));
      assertNotNull(typeToken1);
      
      Class class3 = (Class)typeToken1.getType();
      assertSame(class1, class2);
      assertNotSame(typeToken1, typeToken0);
      assertTrue(typeToken1.equals((Object)typeToken0));
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class com.google.gson.internal.Excluder", class3.toString());
      
      Class<Type> class4 = Type.class;
      TypeToken<Type> typeToken2 = TypeToken.get(class4);
      assertNotNull(typeToken2);
      
      Class class5 = (Class)typeToken2.getType();
      assertNotSame(class5, class3);
      assertFalse(class5.equals((Object)class3));
      assertNotNull(class5);
      assertFalse(class5.isArray());
      assertEquals(1537, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertTrue(class5.isInterface());
      assertEquals("interface java.lang.reflect.Type", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      
      String string0 = gson0.toJson((Object) class0, (Type) class5);
      assertNotSame(class5, class3);
      assertEquals("{}", string0);
      assertFalse(class5.equals((Object)class3));
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class5.isArray());
      assertEquals(1537, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertTrue(class5.isInterface());
      assertEquals("interface java.lang.reflect.Type", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) fieldNamingStrategy0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Float>();
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      assertNotNull(gson_FutureTypeAdapter1);
      
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter0, gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter1, gson_FutureTypeAdapter0);
      assertFalse(gson_FutureTypeAdapter0.equals((Object)gson_FutureTypeAdapter1));
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(292.51297F);
      assertEquals(292.51297F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = "\\Q@qS,~&@yf yRg";
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson("Q@qS,~&@yf yRg", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"Q@qS\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      
      Gson gson2 = new Gson();
      assertFalse(gson2.equals((Object)gson0));
      assertFalse(gson2.equals((Object)gson1));
      assertNotNull(gson2);
      assertFalse(gson2.serializeNulls());
      assertTrue(gson2.htmlSafe());
      
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      assertNotNull(jsonNull0);
      assertFalse(jsonNull0.isJsonArray());
      assertFalse(jsonNull0.isJsonObject());
      assertTrue(jsonNull0.isJsonNull());
      assertFalse(jsonNull0.isJsonPrimitive());
      
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Double double0 = gson1.fromJson((JsonElement) jsonNull0, (Type) class1);
      assertNotSame(gson1, gson0);
      assertNotSame(gson1, gson2);
      assertFalse(gson1.equals((Object)gson0));
      assertFalse(gson1.equals((Object)gson2));
      assertNull(double0);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      assertFalse(jsonNull0.isJsonArray());
      assertFalse(jsonNull0.isJsonObject());
      assertTrue(jsonNull0.isJsonNull());
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        gson2.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.reflect.Type. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      Object object0 = gson0.fromJson("w+fm_~X-", (Type) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      Object object0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Integer>();
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      assertNotNull(gson_FutureTypeAdapter1);
      
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter0, gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter1, gson_FutureTypeAdapter0);
      assertFalse(gson_FutureTypeAdapter0.equals((Object)gson_FutureTypeAdapter1));
      assertFalse(gson_FutureTypeAdapter1.equals((Object)gson_FutureTypeAdapter0));
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson(" or make fields accessible, or include sun.misc.Unsafe.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Float>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Float>>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson(reader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Expected a Class, ParameterizedType, or GenericArrayType, but <");
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      
      String string0 = jsonPrimitive1.toString();
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertEquals("\"Expected a Class, ParameterizedType, or GenericArrayType, but <\"", string0);
      assertNotNull(string0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Object> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      JsonPrimitive jsonPrimitive2 = (JsonPrimitive)gson0.toJsonTree((Object) integer0, (Type) class1);
      assertNotSame(jsonPrimitive2, jsonPrimitive0);
      assertNotSame(jsonPrimitive2, jsonPrimitive1);
      assertFalse(jsonPrimitive2.equals((Object)jsonPrimitive0));
      assertFalse(jsonPrimitive2.equals((Object)jsonPrimitive1));
      assertNotNull(jsonPrimitive2);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(jsonPrimitive2.isJsonObject());
      assertFalse(jsonPrimitive2.isJsonArray());
      assertTrue(jsonPrimitive2.isJsonPrimitive());
      assertFalse(jsonPrimitive2.isJsonNull());
      assertTrue(jsonPrimitive2.isNumber());
      assertFalse(jsonPrimitive2.isString());
      assertFalse(jsonPrimitive2.isBoolean());
      
      // Undeclared exception!
      try { 
        jsonPrimitive1.getAsInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Expected a Class, ParameterizedType, or GenericArrayType, but <\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) fieldNamingStrategy0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertEquals("class com.google.gson.internal.Excluder", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      
      boolean boolean0 = Gson.DEFAULT_JSON_NON_EXECUTABLE;
      assertFalse(boolean0);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertEquals("double", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        gson1.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      Type type0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Type) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      MockFile mockFile0 = new MockFile("q>AkPv;:^O)");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 16);
      assertNotNull(bufferedWriter0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("q>AkPv;:^O)", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("q>AkPv;:^O)", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      gson0.toJson((Object) null, (Type) class0, (Appendable) bufferedWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("q>AkPv;:^O)", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("q>AkPv;:^O)", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson.checkValidFloatingPoint((-552.728598542346));
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = gson0.toJson((Object) float0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      gson0.toJsonTree((Object) jsonReader0);
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Date> class0 = Date.class;
      TypeToken<Date> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Date> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Type> class1 = Type.class;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      TypeToken<Type> typeToken1 = TypeToken.get(class1);
      assertNotNull(typeToken1);
      
      TypeAdapter<Type> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      assertNotSame(excluder0, excluder1);
      assertFalse(excluder0.equals((Object)excluder1));
      assertNotNull(typeAdapter1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) null, (Type) class1);
      assertNull(atomicLongArray0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      Excluder excluder2 = gson0.excluder();
      assertSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder1);
      assertFalse(excluder2.equals((Object)excluder1));
      assertNotNull(excluder2);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonReader jsonReader1 = gson0.newJsonReader(pipedReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader1.isLenient());
      
      try { 
        gson0.fromJson(jsonReader1, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = "C=A/F!4:+2eI";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "C=A/F!4:+2eI");
      assertNotNull(charBuffer0);
      assertEquals(12, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(12, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.limit());
      assertEquals(12, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("C=A/F!4:+2eI", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "C=A/F!4:+2eI", (Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isEmpty());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<HashMap<Integer, Long>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Class<Byte> class0 = Byte.class;
      int int0 = Integer.remainderUnsigned(1, 1);
      assertEquals(0, int0);
      
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Byte> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = gson0.toJson((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken1 = TypeToken.get(class1);
      assertNotNull(typeToken1);
      
      TypeAdapter<AtomicLongArray> typeAdapter1 = gson0.getAdapter(typeToken1);
      assertNotNull(typeAdapter1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string1 = gson0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Type> class2 = Type.class;
      Type type0 = gson0.fromJson((Reader) stringReader0, class2);
      assertNull(type0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      String string2 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = null;
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Gson.FutureTypeAdapter<Type> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Type>();
      assertNotNull(gson_FutureTypeAdapter1);
      
      String string1 = gson0.toJson((Object) gson_FutureTypeAdapter0);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}", 0, 1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("{", stringWriter0.toString());
      assertEquals("{", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{}");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("{{}", stringWriter0.toString());
      assertEquals("{{}", stringWriter1.toString());
      assertEquals("{{}", stringWriter2.toString());
      
      gson0.toJson((JsonElement) null, (Appendable) stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("{{}null", stringWriter0.toString());
      assertEquals("{{}null", stringWriter1.toString());
      assertEquals("{{}null", stringWriter2.toString());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) fieldNamingStrategy0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.google.gson.internal.Excluder", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      JsonPrimitive jsonPrimitive1 = (JsonPrimitive)longSerializationPolicy0.serialize(long0);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(jsonPrimitive1);
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonArray());
      
      Class<Double> class2 = Double.class;
      Double double0 = (Double)gson1.fromJson((JsonElement) jsonPrimitive1, (Class<?>) class2);
      assertNotSame(gson1, gson0);
      assertNotSame(jsonPrimitive1, jsonPrimitive0);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(gson1.equals((Object)gson0));
      assertFalse(jsonPrimitive1.equals((Object)jsonPrimitive0));
      assertNotNull(double0);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isNumber());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isString());
      assertFalse(jsonPrimitive1.isJsonArray());
      
      Class<Short> class3 = Short.class;
      TypeToken<Short> typeToken1 = TypeToken.get(class3);
      assertNotNull(typeToken1);
      
      TypeAdapter<Short> typeAdapter0 = gson1.getAdapter(typeToken1);
      assertNotSame(gson1, gson0);
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(typeAdapter0);
      assertFalse(gson1.serializeNulls());
      assertTrue(gson1.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      HashMap<Type, InstanceCreator<BigInteger>> hashMap0 = new HashMap<Type, InstanceCreator<BigInteger>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      gson0.toJson((Object) pipedWriter0, (Appendable) pipedWriter0);
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeAdapter<DefaultDateTypeAdapter> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = gson0.toJson(object0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("I=3", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      boolean boolean1 = gson0.htmlSafe();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Object object0 = gson0.fromJson("com.google.gson.Gson$1", (Type) class0);
      assertEquals(false, object0);
      assertTrue(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("-'Nke'%wJVQU*", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) fieldNamingStrategy0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Short short0 = gson0.fromJson("", (Type) class0);
      assertNull(short0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      
      Class<Short> class2 = Short.TYPE;
      assertSame(class2, class1);
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      
      try { 
        gson0.fromJson("*s`n/kQ5yL;#M&", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"*s`n\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Date> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Date>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class com.google.gson.internal.Excluder", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("com.google.gson.internal.bind.TypeAdapters", "");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.google.gson.internal.bind.TypeAdapters0", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("/tmp/com.google.gson.internal.bind.TypeAdapters0", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = (MockFileWriter)mockFileWriter0.append('4');
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.google.gson.internal.bind.TypeAdapters0", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("/tmp/com.google.gson.internal.bind.TypeAdapters0", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      
      MockFileWriter mockFileWriter2 = (MockFileWriter)mockFileWriter1.append('4');
      assertSame(mockFileWriter0, mockFileWriter2);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter2);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertSame(mockFileWriter2, mockFileWriter0);
      assertSame(mockFileWriter2, mockFileWriter1);
      assertNotNull(mockFileWriter2);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("com.google.gson.internal.bind.TypeAdapters0", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("/tmp/com.google.gson.internal.bind.TypeAdapters0", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      
      Class<Boolean> class3 = Boolean.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("boolean", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class2, (Type) class3, (Appendable) mockFileWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1);
      assertNotNull(atomicLongArray0);
      assertEquals("[0]", atomicLongArray0.toString());
      assertEquals(1, atomicLongArray0.length());
      
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("[0]", atomicLongArray0.toString());
      assertEquals(1, atomicLongArray0.length());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      PipedReader pipedReader0 = new PipedReader(296);
      assertNotNull(pipedReader0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigInteger0);
      assertNotNull(jsonPrimitive0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "[java.lang.Long@0000000025]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toString();
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader(". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Object object0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test127()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      Gson gson2 = new Gson();
      assertFalse(gson2.equals((Object)gson1));
      assertFalse(gson2.equals((Object)gson0));
      assertNotNull(gson2);
      assertFalse(gson2.serializeNulls());
      assertTrue(gson2.htmlSafe());
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      assertNotNull(jsonPrimitive0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      boolean boolean0 = jsonPrimitive0.getAsBoolean();
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertNotNull(jsonPrimitive1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      
      String string0 = gson2.toJson((JsonElement) jsonPrimitive1);
      assertNotSame(gson2, gson1);
      assertNotSame(gson2, gson0);
      assertSame(jsonPrimitive0, jsonPrimitive1);
      assertSame(jsonPrimitive1, jsonPrimitive0);
      assertFalse(gson2.equals((Object)gson1));
      assertFalse(gson2.equals((Object)gson0));
      assertNotNull(string0);
      assertFalse(gson2.serializeNulls());
      assertTrue(gson2.htmlSafe());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive1.isJsonPrimitive());
      assertTrue(jsonPrimitive1.isNumber());
      assertFalse(jsonPrimitive1.isJsonObject());
      assertFalse(jsonPrimitive1.isJsonArray());
      assertFalse(jsonPrimitive1.isBoolean());
      assertFalse(jsonPrimitive1.isJsonNull());
      assertFalse(jsonPrimitive1.isString());
      
      int int0 = 0;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      Gson gson2 = new Gson();
      assertFalse(gson2.equals((Object)gson1));
      assertFalse(gson2.equals((Object)gson0));
      assertNotNull(gson2);
      assertFalse(gson2.serializeNulls());
      assertTrue(gson2.htmlSafe());
      
      Gson gson3 = new Gson();
      assertFalse(gson3.equals((Object)gson0));
      assertFalse(gson3.equals((Object)gson1));
      assertFalse(gson3.equals((Object)gson2));
      assertNotNull(gson3);
      assertFalse(gson3.serializeNulls());
      assertTrue(gson3.htmlSafe());
      
      Gson gson4 = new Gson();
      assertFalse(gson4.equals((Object)gson0));
      assertFalse(gson4.equals((Object)gson3));
      assertFalse(gson4.equals((Object)gson1));
      assertFalse(gson4.equals((Object)gson2));
      assertNotNull(gson4);
      assertTrue(gson4.htmlSafe());
      assertFalse(gson4.serializeNulls());
      
      Gson gson5 = new Gson();
      assertFalse(gson5.equals((Object)gson4));
      assertFalse(gson5.equals((Object)gson3));
      assertFalse(gson5.equals((Object)gson0));
      assertFalse(gson5.equals((Object)gson2));
      assertFalse(gson5.equals((Object)gson1));
      assertNotNull(gson5);
      assertTrue(gson5.htmlSafe());
      assertFalse(gson5.serializeNulls());
      
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      
      Class<AtomicLong> class0 = AtomicLong.class;
      AtomicLong atomicLong0 = (AtomicLong)gson4.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
      assertNotSame(gson4, gson0);
      assertNotSame(gson4, gson3);
      assertNotSame(gson4, gson1);
      assertNotSame(gson4, gson5);
      assertNotSame(gson4, gson2);
      assertFalse(gson4.equals((Object)gson0));
      assertFalse(gson4.equals((Object)gson3));
      assertFalse(gson4.equals((Object)gson1));
      assertFalse(gson4.equals((Object)gson5));
      assertFalse(gson4.equals((Object)gson2));
      assertNotNull(atomicLong0);
      assertTrue(gson4.htmlSafe());
      assertFalse(gson4.serializeNulls());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertEquals(3L, atomicLong0.get());
      assertEquals((byte)3, atomicLong0.byteValue());
      assertEquals(3L, atomicLong0.longValue());
      assertEquals("3", atomicLong0.toString());
      assertEquals(3.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(3.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(3, atomicLong0.intValue());
      assertEquals((short)3, atomicLong0.shortValue());
      
      Excluder excluder0 = gson2.excluder();
      assertNotSame(gson2, gson1);
      assertNotSame(gson2, gson5);
      assertNotSame(gson2, gson0);
      assertNotSame(gson2, gson4);
      assertNotSame(gson2, gson3);
      assertFalse(gson2.equals((Object)gson1));
      assertFalse(gson2.equals((Object)gson5));
      assertFalse(gson2.equals((Object)gson0));
      assertFalse(gson2.equals((Object)gson4));
      assertFalse(gson2.equals((Object)gson3));
      assertNotNull(excluder0);
      assertFalse(gson2.serializeNulls());
      assertTrue(gson2.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson5.fieldNamingStrategy();
      assertNotSame(gson5, gson4);
      assertNotSame(gson5, gson3);
      assertNotSame(gson5, gson0);
      assertNotSame(gson5, gson2);
      assertNotSame(gson5, gson1);
      assertFalse(gson5.equals((Object)gson4));
      assertFalse(gson5.equals((Object)gson3));
      assertFalse(gson5.equals((Object)gson0));
      assertFalse(gson5.equals((Object)gson2));
      assertFalse(gson5.equals((Object)gson1));
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson5.htmlSafe());
      assertFalse(gson5.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test129()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test130()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Short>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test131()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1845;
      intArray0[1] = (-3979);
      intArray0[2] = (-854);
      intArray0[3] = 1924;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder0);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder1.equals((Object)excluder0));
      assertNotNull(excluder1);
      
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(true, true);
      assertNotNull(mockExclusionStrategy0);
      
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, true, true);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder1);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertNotNull(excluder2);
      
      Excluder excluder3 = excluder2.excludeFieldsWithoutExposeAnnotation();
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder0);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder0));
      assertNotNull(excluder3);
      
      Excluder excluder4 = excluder3.disableInnerClassSerialization();
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertNotNull(excluder4);
      
      Excluder excluder5 = excluder4.withVersion((-3188.0));
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder5);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder5);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder5);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder3, excluder5);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder5);
      assertNotSame(excluder5, excluder0);
      assertNotSame(excluder5, excluder4);
      assertNotSame(excluder5, excluder1);
      assertNotSame(excluder5, excluder2);
      assertNotSame(excluder5, excluder3);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder5.equals((Object)excluder0));
      assertFalse(excluder5.equals((Object)excluder4));
      assertFalse(excluder5.equals((Object)excluder1));
      assertFalse(excluder5.equals((Object)excluder2));
      assertFalse(excluder5.equals((Object)excluder3));
      assertNotNull(excluder5);
      
      Gson gson1 = new Gson();
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(gson1);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      Class<Float> class0 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<?> typeAdapter0 = excluder5.create(gson1, (TypeToken<?>) typeToken0);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder5);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder5);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder5);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder3, excluder5);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder5);
      assertNotSame(excluder5, excluder0);
      assertNotSame(excluder5, excluder4);
      assertNotSame(excluder5, excluder1);
      assertNotSame(excluder5, excluder2);
      assertNotSame(excluder5, excluder3);
      assertNotSame(gson1, gson0);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder0.equals((Object)excluder5));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder5));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder5));
      assertFalse(excluder5.equals((Object)excluder0));
      assertFalse(excluder5.equals((Object)excluder4));
      assertFalse(excluder5.equals((Object)excluder1));
      assertFalse(excluder5.equals((Object)excluder2));
      assertFalse(excluder5.equals((Object)excluder3));
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(typeAdapter0);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
      
      TypeAdapter<Float> typeAdapter1 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder5, typeToken0);
      assertNotSame(gson0, gson1);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder5);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder5);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder5);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder3, excluder5);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder5);
      assertNotSame(excluder5, excluder0);
      assertNotSame(excluder5, excluder4);
      assertNotSame(excluder5, excluder1);
      assertNotSame(excluder5, excluder2);
      assertNotSame(excluder5, excluder3);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(gson0.equals((Object)gson1));
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder0.equals((Object)excluder5));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder5));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder5));
      assertFalse(excluder5.equals((Object)excluder0));
      assertFalse(excluder5.equals((Object)excluder4));
      assertFalse(excluder5.equals((Object)excluder1));
      assertFalse(excluder5.equals((Object)excluder2));
      assertFalse(excluder5.equals((Object)excluder3));
      assertNotNull(typeAdapter1);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter1);
      assertNotSame(gson0, gson1);
      assertNotSame(excluder0, excluder4);
      assertNotSame(excluder0, excluder3);
      assertNotSame(excluder0, excluder2);
      assertNotSame(excluder0, excluder1);
      assertNotSame(excluder0, excluder5);
      assertNotSame(excluder1, excluder2);
      assertNotSame(excluder1, excluder0);
      assertNotSame(excluder1, excluder4);
      assertNotSame(excluder1, excluder3);
      assertNotSame(excluder1, excluder5);
      assertNotSame(excluder2, excluder0);
      assertNotSame(excluder2, excluder5);
      assertNotSame(excluder2, excluder3);
      assertNotSame(excluder2, excluder1);
      assertNotSame(excluder2, excluder4);
      assertNotSame(excluder3, excluder1);
      assertNotSame(excluder3, excluder2);
      assertNotSame(excluder3, excluder4);
      assertNotSame(excluder3, excluder0);
      assertNotSame(excluder3, excluder5);
      assertNotSame(excluder4, excluder1);
      assertNotSame(excluder4, excluder2);
      assertNotSame(excluder4, excluder3);
      assertNotSame(excluder4, excluder0);
      assertNotSame(excluder4, excluder5);
      assertNotSame(excluder5, excluder0);
      assertNotSame(excluder5, excluder4);
      assertNotSame(excluder5, excluder1);
      assertNotSame(excluder5, excluder2);
      assertNotSame(excluder5, excluder3);
      assertArrayEquals(new int[] {1845, (-3979), (-854), 1924}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(gson0.equals((Object)gson1));
      assertFalse(excluder0.equals((Object)excluder4));
      assertFalse(excluder0.equals((Object)excluder3));
      assertFalse(excluder0.equals((Object)excluder2));
      assertFalse(excluder0.equals((Object)excluder1));
      assertFalse(excluder0.equals((Object)excluder5));
      assertFalse(excluder1.equals((Object)excluder2));
      assertFalse(excluder1.equals((Object)excluder0));
      assertFalse(excluder1.equals((Object)excluder4));
      assertFalse(excluder1.equals((Object)excluder3));
      assertFalse(excluder1.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder0));
      assertFalse(excluder2.equals((Object)excluder5));
      assertFalse(excluder2.equals((Object)excluder3));
      assertFalse(excluder2.equals((Object)excluder1));
      assertFalse(excluder2.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder1));
      assertFalse(excluder3.equals((Object)excluder2));
      assertFalse(excluder3.equals((Object)excluder4));
      assertFalse(excluder3.equals((Object)excluder0));
      assertFalse(excluder3.equals((Object)excluder5));
      assertFalse(excluder4.equals((Object)excluder1));
      assertFalse(excluder4.equals((Object)excluder2));
      assertFalse(excluder4.equals((Object)excluder3));
      assertFalse(excluder4.equals((Object)excluder0));
      assertFalse(excluder4.equals((Object)excluder5));
      assertFalse(excluder5.equals((Object)excluder0));
      assertFalse(excluder5.equals((Object)excluder4));
      assertFalse(excluder5.equals((Object)excluder1));
      assertFalse(excluder5.equals((Object)excluder2));
      assertFalse(excluder5.equals((Object)excluder3));
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Float float0 = new Float((-1394.8885F));
      assertEquals((-1394.8885F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((float) (-3979));
      assertEquals((-3979.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf((-3981.463F));
      assertEquals((-3981.463F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf((-649.0F));
      assertEquals((-649.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      JsonElement jsonElement0 = gson_FutureTypeAdapter0.toJsonTree(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(jsonElement0);
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonNull());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonPrimitive());
      
      Gson gson2 = new Gson();
      assertFalse(gson2.equals((Object)gson1));
      assertFalse(gson2.equals((Object)gson0));
      assertNotNull(gson2);
      assertTrue(gson2.htmlSafe());
      assertFalse(gson2.serializeNulls());
      
      String string0 = gson1.toString();
      assertNotSame(gson1, gson2);
      assertNotSame(gson1, gson0);
      assertFalse(gson1.equals((Object)gson2));
      assertFalse(gson1.equals((Object)gson0));
      assertNotNull(string0);
      assertTrue(gson1.htmlSafe());
      assertFalse(gson1.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test132()  throws Throwable  {
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize long
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test133()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test134()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("jU;QV{hTF|lmq+__Q", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test135()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Object object0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-11);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)85, (byte)1, (byte)12, (byte)93, (byte)2, (byte)2, (byte) (-11)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      boolean boolean1 = gson0.htmlSafe();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeAdapter<AtomicLong> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      MockDate mockDate0 = new MockDate((byte)93);
      assertNotNull(mockDate0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      JsonWriter jsonWriter0 = new JsonWriter(outputStreamWriter0);
      assertNotNull(jsonWriter0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockDate cannot be cast to java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.google.gson.Gson$4", e);
      }
  }

  @Test(timeout = 100000)
  public void test137()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      
      String string0 = gson0.toJson((Object) atomicLong0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
  }

  @Test(timeout = 100000)
  public void test138()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test139()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gson_FutureTypeAdapter0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonArray());
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 100000)
  public void test140()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Object object0 = gson0.fromJson("com.google.gson.Gson$1", (Type) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 100000)
  public void test141()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson.checkValidFloatingPoint((-552.728598542346));
      PipedReader pipedReader0 = new PipedReader(2);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.newBuilder();
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) null, (Class<?>) class0);
      Gson gson2 = new Gson();
      // Undeclared exception!
      gson2.toJson((Object) pipedReader0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test142()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson.checkValidFloatingPoint((-552.728598542346));
      PipedReader pipedReader0 = new PipedReader(2);
      Gson gson0 = new Gson();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float((float) 2);
      gson0.toJson((Object) float0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test143()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) fieldNamingStrategy0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      typeToken0.getType();
      Class<Short> class1 = Short.TYPE;
      gson0.fromJson((String) null, (Type) class0);
      URI uRI0 = MockURI.aFTPURI;
      uRI0.toASCIIString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }
}
