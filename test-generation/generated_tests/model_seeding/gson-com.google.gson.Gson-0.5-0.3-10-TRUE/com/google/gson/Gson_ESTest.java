/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 12:14:12 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.ParameterizedTypeFixtures;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      MockDate mockDate0 = new MockDate(1848, (-963), (-963));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Type) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'Z';
      charArray0[2] = ']';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[3] = ']';
      charArray0[5] = ']';
      charArray0[6] = 'Z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      charBuffer0.codePoints();
      gson0.toJson((Object) null, (Appendable) charBuffer0);
      gson0.serializeNulls();
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Gson gson0 = new Gson();
      gson0.newJsonReader(pipedReader0);
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0);
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint((-2054.1));
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.class;
      gson0.getAdapter(class1);
      try { 
        gson0.fromJson("C9M{/b&=A\">zA", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken.get(class0);
      Class<Integer> class1 = Integer.TYPE;
      Class<Integer> class2 = Integer.TYPE;
      Gson gson1 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      gson1.toJsonTree((Object) bigDecimal0, (Type) class1);
      Gson.checkValidFloatingPoint((-1.0));
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<AtomicLong>) null);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3138);
      gson0.toJsonTree((Object) atomicLongArray0);
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken.get(class0);
      Class<Integer> class1 = Integer.TYPE;
      gson0.fromJson("", (Type) class0);
      TypeAdapter<BigDecimal> typeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      Class<AtomicLong> class2 = AtomicLong.class;
      try { 
        gson0.fromJson("y*'q9i(.x'", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"y*'q9i(.x'\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      Class<? super Type> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson("N& time zone indicator", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      Gson gson1 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("d>|", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) short0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'+h0>/NF]cUXZ");
      Boolean boolean0 = new Boolean(true);
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("BpHPIWTc%LRAcbp3,bS", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson("|cip=~Yv9({K(#Z_Sc", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      Gson gson1 = new Gson();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = gson1.newJsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson(jsonReader0, (Type) class0);
      Class<Boolean> class1 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(117);
      gson0.toJson((Object) atomicLong0);
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      StringReader stringReader0 = new StringReader("5{9.GW'#;'.sLP^[H");
      Class<Type> class1 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson cannot be cast to java.lang.Character
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$15", e);
      }
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Class<? super String> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Character character0 = Character.valueOf('d');
      character0.toString();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Character.isDigit('=');
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive((Character) '=');
      JsonPrimitive jsonPrimitive2 = jsonPrimitive0.getAsJsonPrimitive();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.isJsonNull();
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0F);
      JsonPrimitive jsonPrimitive3 = new JsonPrimitive(float0);
      Class<String> class0 = String.class;
      gson0.fromJson((JsonElement) jsonPrimitive3, (Class<?>) class0);
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive2, class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, (Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      Class<Double> class1 = Double.TYPE;
      try { 
        gson0.fromJson("|A.bEu", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"|A.bEu\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1380);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) atomicLongArray0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'+h0>/NF]cUXZ");
      Boolean.valueOf(true);
      Class<BigInteger> class0 = BigInteger.class;
      gson0.getAdapter(class0);
      gson0.fieldNamingStrategy();
      gson0.toJson((JsonElement) null);
      Class<String> class1 = String.class;
      gson0.getAdapter(class1);
      MockDate mockDate0 = new MockDate();
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      TypeToken.getArray(class0);
      Type[] typeArray0 = new Type[0];
      TypeToken.getParameterized(class0, typeArray0);
      TypeToken.getArray(class0);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = gson0.excluder();
      gson0.htmlSafe();
      excluder0.disableInnerClassSerialization();
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken1 = TypeToken.get(class1);
      TypeToken.getArray(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      gson0.excluder();
      gson0.serializeNulls();
      String string0 = "Use JsonReader.setLenient(true) to accept malformed JSON";
      Class<Character> class2 = Character.TYPE;
      try { 
        gson0.fromJson("Use JsonReader.setLenient(true) to accept malformed JSON", (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got: Use
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$15", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
      Class<Integer> class0 = Integer.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      Class<Long> class1 = Long.class;
      TypeToken.get(class1);
      Class<Byte> class2 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeToken.getParameterized(class2, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(868.61854);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.htmlSafe();
      Class<Float> class0 = Float.TYPE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null, (Writer) null).when(writer0).append(any(java.lang.CharSequence.class));
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setLenient(false);
      jsonWriter0.isHtmlSafe();
      jsonWriter0.setHtmlSafe(false);
      jsonWriter0.getSerializeNulls();
      jsonWriter0.setSerializeNulls(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((Number) float0);
      gson1.toJson((Object) float0, (Type) class0, jsonWriter1);
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Character character0 = Character.valueOf('8');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      jsonPrimitive1.isJsonNull();
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      JsonNull jsonNull0 = new JsonNull();
      Long long0 = new Long(0L);
      jsonNull0.equals(long0);
      jsonNull0.equals(long0);
      jsonNull0.equals(long0);
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.isLenient();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jsonWriter0.setLenient(true);
      jsonWriter0.isHtmlSafe();
      jsonWriter0.setHtmlSafe(true);
      jsonWriter0.setSerializeNulls(false);
      gson0.toJson((JsonElement) jsonNull1, jsonWriter0);
      // Undeclared exception!
      try { 
        gson0.fromJson("*xX>^~X", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Locale locale0 = Locale.forLanguageTag("`H?Wa");
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(stringWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) locale0, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.math.BigDecimal
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$17", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1);
      gson0.toJsonTree((Object) atomicLongArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      Character.valueOf('8');
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(712);
      String string0 = gson0.toJson((Object) atomicLongArray0);
      // Undeclared exception!
      gson0.toJson((Object) string0);
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('>');
      Class<Float> class0 = Float.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) gson0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null, (Writer) null, (Writer) null, (Writer) null, (Writer) null).when(writer0).append(any(java.lang.CharSequence.class));
      doReturn((Writer) null, (Writer) null, (Writer) null, (Writer) null, (Writer) null).when(writer0).append(anyChar());
      JsonWriter jsonWriter0 = new JsonWriter(writer0);
      jsonWriter0.setSerializeNulls(false);
      gson0.toJson(jsonElement0, jsonWriter0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(776);
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.serializeNulls();
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.add("h>7|x}:Q~Eq", (JsonElement) null);
      jsonObject0.isJsonNull();
      jsonObject0.add("h>7|x}:Q~Eq", (JsonElement) null);
      Boolean boolean0 = new Boolean("h>7|x}:Q~Eq");
      jsonObject0.addProperty("", boolean0);
      jsonObject0.entrySet();
      jsonObject0.getAsJsonPrimitive("JSON document was not fully consumed.");
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((JsonElement) null, class0);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonReader jsonReader0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tA/");
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("", (Type) class0);
      Class<BigDecimal> class1 = BigDecimal.class;
      gson0.getAdapter(class1);
      Class<AtomicLong> class2 = AtomicLong.class;
      gson0.fromJson("", class2);
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      // Undeclared exception!
      try { 
        gson0.fromJson("{'id':'ec57803e2'}", (Class<DefaultDateTypeAdapter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertFalse(gson0.serializeNulls());
      assertTrue(boolean0);
      
      gson0.newBuilder();
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) gson0);
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      gson0.fromJson(string0, class0);
      Gson.checkValidFloatingPoint(238.0);
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson0.excluder();
      gson0.serializeNulls();
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3129);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('<');
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      gson0.toJson((JsonElement) jsonNull0, jsonWriter1);
      gson0.toJson((JsonElement) null);
      StringReader stringReader0 = new StringReader("null");
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.fromJson((Reader) stringReader0, class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-54);
      byte byte0 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[3];
      intArray0[0] = 47;
      intArray0[1] = 63;
      intArray0[2] = (-1381);
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, true);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, true, false);
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize double
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.ONE;
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Appendable appendable0 = charBuffer0.append('f');
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigInteger0, appendable0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("c(4{L?PfK<IT-LCkh8C");
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson("{'id':'ec57803e2'}", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Float>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, (Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Class<Excluder> class1 = Excluder.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class1, class1, class0, class1).when(typeToken0).getRawType();
      doReturn(class0, class1, class1, class1, class0).when(typeToken0).getType();
      gson0.getAdapter(typeToken0);
      gson0.newBuilder();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(2854).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      Class<Float> class2 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(reader0, class2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.toJson((Object) null, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken.get(class0);
      Class<Integer> class1 = Integer.TYPE;
      gson0.fromJson((String) null, (Type) null);
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      Class<AtomicLong> class2 = AtomicLong.class;
      try { 
        gson0.fromJson("y*'q9i(.x'", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"y*'q9i(.x'\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('8');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      jsonPrimitive1.isJsonNull();
      Class<Long> class0 = Long.TYPE;
      MockDate mockDate0 = new MockDate();
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("M=hRwZ`", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.annotation.Annotation. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class1).when(typeToken0).getRawType();
      gson0.getAdapter(typeToken0);
      gson0.newBuilder();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      Class<Integer> class2 = Integer.class;
      excluder1.excludeClass(class2, true);
      Class<BigInteger> class3 = BigInteger.class;
      excluder1.excludeClass(class3, false);
      Excluder excluder2 = new Excluder();
      Excluder excluder3 = new Excluder();
      Excluder excluder4 = new Excluder();
      Excluder excluder5 = new Excluder();
      Class<String> class4 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class4);
      excluder5.create(gson0, typeToken1);
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<String>) null);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      Class<Float> class5 = Float.class;
      gson0.fromJson(reader0, class5);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class5, (Type) class5, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = null;
      Class<AtomicLong> class0 = AtomicLong.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$27", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$27\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken.get(class0);
      Excluder excluder0 = new Excluder();
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Float>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      gson0.toJson((Object) gson_FutureTypeAdapter0);
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Byte byte0 = Byte.valueOf((byte)0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte) (-39));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(byte0);
      gson0.toJson((JsonElement) jsonPrimitive0);
      String string0 = gson0.toJson((Object) gson0);
      gson0.htmlSafe();
      StringReader stringReader0 = new StringReader(string0);
      Class<Excluder> class0 = Excluder.class;
      gson0.fromJson((Reader) stringReader0, class0);
      Gson.FutureTypeAdapter<Locale> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Locale>();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      long[] longArray0 = new long[7];
      longArray0[0] = (-967L);
      longArray0[1] = (-1L);
      longArray0[2] = (-260L);
      longArray0[3] = 948L;
      longArray0[4] = 93L;
      longArray0[5] = 0L;
      longArray0[6] = (-1329L);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) atomicLongArray0);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        atomicLongArray0.accumulateAndGet(2311, 2311, longBinaryOperator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2311
         //
         verifyException("java.util.concurrent.atomic.AtomicLongArray", e);
      }
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      gson0.fromJson((String) null, class0);
      Class<BigDecimal> class1 = BigDecimal.class;
      TypeToken.get(class1);
      Class<Integer> class2 = Integer.TYPE;
      Character character0 = Character.valueOf('8');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      jsonPrimitive0.isJsonNull();
      gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class1);
      System.setCurrentTimeMillis((-137L));
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      TypeToken.getArray(class0);
      Type[] typeArray0 = new Type[0];
      TypeToken.getParameterized(class0, typeArray0);
      TypeToken.getArray(class0);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = gson0.excluder();
      gson0.htmlSafe();
      excluder0.disableInnerClassSerialization();
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken1 = TypeToken.get(class1);
      TypeToken.getArray(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      gson0.excluder();
      gson0.serializeNulls();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      outputStreamWriter0.write(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      gson0.toJson((Object) null, (Type) class0, (Appendable) mockPrintWriter0);
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(868.618541672075);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) float0, (Appendable) charArrayWriter0);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) charArrayWriter0, (Type) class0, (Appendable) charArrayWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Float>();
      gson_FutureTypeAdapter1.nullSafe();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.Excluder cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((JsonElement) null, (Class<?>) class0);
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson("*RJ2M2Sd_l0JFJuP", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"*RJ2M2Sd_l0JFJuP\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      Integer integer0 = new Integer(2269);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) integer0, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      gson0.fromJson("com.google.gson.Gson$FutureTypeAdapter", type0);
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sB)0$?2K5.*d8]/_uV");
      mockPrintWriter0.write("JSON document was not fully consumed.", 0, 6);
      mockPrintWriter0.write(0);
      mockPrintWriter0.write((-2567));
      gson0.newJsonWriter(mockPrintWriter0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson.checkValidFloatingPoint((-1606.7690502));
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<AtomicLong>();
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter2 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson_FutureTypeAdapter2.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter2.fromJson("NUMBER");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Gson.checkValidFloatingPoint((byte)94);
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Short> class0 = Short.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.Gson");
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Boolean boolean0 = new Boolean("");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      jsonPrimitive0.isJsonNull();
      gson0.toJson((JsonElement) jsonPrimitive0);
      PipedReader pipedReader0 = new PipedReader((byte)94);
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<AtomicLong>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<AtomicLong>) null);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(false);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson("", class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeAdapterFactory typeAdapterFactory0 = mock(TypeAdapterFactory.class, new ViolatedAssumptionAnswer());
      Class<Object> class1 = Object.class;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      TypeToken<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLong>> typeToken0 = (TypeToken<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLong>>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class1, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      byte byte0 = (byte)106;
      Byte byte1 = new Byte((byte)106);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      typeToken0.toString();
      TypeToken.get((Type) class0);
      Class<? super String> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) byte1, (Type) class1, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Integer> class0 = Integer.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      JsonWriter jsonWriter0 = null;
      Float float0 = new Float(0.0);
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) float0);
      float0.isInfinite();
      float0.isInfinite();
      float0.isInfinite();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      String string0 = "@xFu0\\U~xn";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@xFu0U~xn");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayName();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf(locale0, "CD#-i\"!aDicRY||", objectArray0);
      gson0.toJson((Object) gson_FutureTypeAdapter0, (Appendable) mockPrintWriter1);
      gson0.serializeNulls();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<String>();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-615.7111245270439));
      gson0.toJson((Object) float0);
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('>');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
      JsonArray jsonArray0 = new JsonArray(3931);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((JsonElement) jsonArray0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) charArrayWriter0, (Appendable) charArrayWriter0);
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = gson0.fromJson("{'id':'ec57803e2'}", class0);
      assertNotNull(defaultDateTypeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Short short0 = new Short((short)117);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) short0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("J`LYx8yj kGtn0_u");
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"J`LYx8yj kGtn0_u\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("+yA^$FM_o0^");
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Character character0 = Character.valueOf('B');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(character0);
      jsonPrimitive1.getAsJsonPrimitive();
      jsonPrimitive1.isJsonNull();
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      gson0.fromJson((Reader) stringReader0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Character character0 = Character.valueOf('8');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      JsonPrimitive jsonPrimitive1 = new JsonPrimitive(character0);
      jsonPrimitive1.getAsJsonPrimitive();
      jsonPrimitive1.isJsonNull();
      Class<Float> class1 = Float.class;
      gson0.fromJson((JsonElement) jsonPrimitive1, class1);
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson("", (Type) class0);
      Class<Double> class1 = Double.TYPE;
      gson0.toJson((Object) null, (Type) class1);
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      Gson.FutureTypeAdapter<Short> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Short>();
      double double0 = 3875.0;
      Gson.checkValidFloatingPoint(3875.0);
      Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Integer>> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Integer>>();
      Reader reader0 = null;
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3991);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.MapTypeAdapterFactory", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("Z", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0);
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) "ob3(Kz8");
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = ']';
      charArray0[2] = '_';
      charArray0[3] = 'Z';
      charArray0[4] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "ob3(Kz8", (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long((-753L));
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      Class<Object> class0 = Object.class;
      gson0.fromJson(jsonElement0, (Class<?>) class0);
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      gson2.toJsonTree((Object) gson1, (Type) class0);
      assertTrue(gson2.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("\"X");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean(false);
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      gson0.newBuilder();
      Class<Double> class0 = Double.TYPE;
      Gson gson1 = new Gson();
      gson1.toJsonTree((Object) null, (Type) class0);
      Gson gson2 = new Gson();
      try { 
        gson2.fromJson("/$b~i>Y\"QXfJnL_o2", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("", (Type) class0);
      Character character0 = new Character('');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson gson1 = new Gson();
      Class<Object> class0 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson1.getAdapter(class0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ObjectTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(0L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'+h0>/NF]cUXZ");
      mockPrintWriter0.println("");
      Boolean.valueOf(true);
      Class<BigInteger> class0 = BigInteger.class;
      gson0.getAdapter(class0);
      gson0.fieldNamingStrategy();
      String string0 = gson0.toJson((JsonElement) null);
      assertEquals("null", string0);
      
      Class<String> class1 = String.class;
      gson0.getAdapter(class1);
      MockDate mockDate0 = new MockDate();
      gson0.toJson((JsonElement) null, (Appendable) mockPrintWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      gson0.toJson((Object) bigDecimal0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray(3153);
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson((Object) null, (Appendable) charArrayWriter0);
      assertEquals(4, charArrayWriter0.size());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.toJsonTree((Object) gson1);
      Float float0 = new Float(0.0F);
      float0.isNaN();
      float0.isInfinite();
      float0.isInfinite();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("-:GK\"vXFd/`l", "-:GK\"vXFd/`l");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -:GK\"vXFd/`l
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson("", class0);
      gson0.toString();
      TypeAdapterFactory typeAdapterFactory0 = mock(TypeAdapterFactory.class, new ViolatedAssumptionAnswer());
      TypeToken<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLong>> typeToken0 = (TypeToken<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLong>>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      Excluder excluder0 = Excluder.DEFAULT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Excluder excluder1 = excluder0.withVersion(27.97145);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      Class<Float> class1 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Float> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      try { 
        gson0.fromJson("{serializeNulls:", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 17 path $.serializeNulls
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test127()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion((-431.75782543578));
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      excluder1.create(gson0, typeToken0);
      TypeToken<AtomicLong> typeToken1 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken1);
      JsonObject jsonObject0 = new JsonObject();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonObject0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      Excluder excluder0 = gson0.excluder();
      Class<Date> class1 = Date.class;
      TypeToken<Date> typeToken0 = TypeToken.get(class1);
      excluder0.disableInnerClassSerialization();
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      TypeToken.get((Type) class2);
      TypeToken.get(class2);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 100000)
  public void test129()  throws Throwable  {
      long long0 = 1189L;
      System.setCurrentTimeMillis(1189L);
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('J');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test130()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) gson0);
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
  }

  @Test(timeout = 100000)
  public void test131()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
      Class<Integer> class0 = Integer.TYPE;
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      String string0 = "=oHt";
      Class<AtomicLong> class1 = AtomicLong.class;
      try { 
        gson0.fromJson("=oHt", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test132()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$FutureTypeAdapter");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test133()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Gson gson2 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson2.fromJson((JsonElement) null, (Class<?>) class0);
      AtomicLong atomicLong0 = new AtomicLong(241L);
      gson2.toJson((Object) atomicLong0, (Appendable) charArrayWriter0);
      assertEquals(25, charArrayWriter0.size());
  }

  @Test(timeout = 100000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(868.618541672075);
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("5/<zA`pb&c=7{)", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test135()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test136()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("JXU;(t*<+");
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test137()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      gson0.fromJson((String) null, class0);
      Class<BigDecimal> class1 = BigDecimal.class;
      TypeToken.get(class1);
      Class<Integer> class2 = Integer.TYPE;
      Character character0 = Character.valueOf('8');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test138()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint((-2054.1));
      String string0 = gson0.toString();
      gson0.htmlSafe();
      Gson.FutureTypeAdapter<BigInteger> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigInteger>();
      Class<BigInteger> class0 = BigInteger.class;
      TypeToken<BigInteger> typeToken0 = TypeToken.get(class0);
      TypeAdapter<BigInteger> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Class<Long> class1 = Long.class;
      try { 
        gson0.fromJson(string0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test139()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(868.618541672075);
      Gson gson1 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson1.toJson((Object) float0, (Appendable) charArrayWriter0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1);
      gson1.toJsonTree((Object) atomicLongArray0);
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = Gson.DEFAULT_ESCAPE_HTML;
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test140()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test141()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) charArrayWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test142()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Class<String> class0 = String.class;
      TypeAdapter<String> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Class<Short> class1 = Short.TYPE;
      String string0 = gson0.toJson((Object) null, (Type) class1);
      assertFalse(gson0.serializeNulls());
      assertEquals("null", string0);
  }

  @Test(timeout = 100000)
  public void test143()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<AtomicLong>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
