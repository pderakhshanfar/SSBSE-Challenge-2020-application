/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 15:15:56 GMT 2020
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z^\"76<hh]$OLO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-18);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2574);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-734);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3:BeOZH'z~hWY})#0$`");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-3039);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#=-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-13);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")qyF-E$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-3062);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")qyF-E$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-3062);
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RL(^&Kx87");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_O2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2258);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[SA.w_3@P]#KC-/ZLm");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2489);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=oDqg*9,3+KL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 14 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c0'>\"CqMlh");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.peeked = 8;
      long long0 = jsonReader0.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c0'>\"CqMlh");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.peeked = 8;
      int int0 = jsonReader0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<'#-Hw/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 12;
      String string0 = jsonReader0.nextName();
      assertEquals("<", string0);
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5 ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextInt();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5 ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      double double0 = jsonReader0.nextDouble();
      assertEquals((-5.0), double0, 0.01);
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lT3bXK{*Z*G1A~8{b");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.locationString();
      assertFalse(jsonReader0.isLenient());
      assertEquals(" at line 1 column 1 path $", string0);
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;xWHg");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      boolean boolean0 = jsonReader0.isLenient();
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = jsonReader0.doPeek();
      assertEquals(7, int0);
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#=-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z4fX>k&:bkN5wVgl96");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T'");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S@%MgWtF(]Sad+6");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-9);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yh");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v-?1KM(");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1187;
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected an int but was ");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 41;
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5 ");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7+pP$UKy");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 491;
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bq2A,Lf");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2130;
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7+pP$UKy");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z^\"76<hh]$OLO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 122;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-]O5JQu-W+D");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rotaj");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1913);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">~");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3'BeOZH'z~hWY})#0$`");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yh");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 41;
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fp+-?9O[*8");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("APkXia;");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 32;
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-ZH/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated string");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 635;
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULeL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.getPath();
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      jsonReader0.nextNull();
      stringReader0.reset();
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;xWHg");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=oDqg*9,3+KL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 14 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^xPg");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 8;
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 12;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.NAME, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lT3bXK{*Zh3*G1A~8{b");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z^\"76<hh]$OLO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 8;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.STRING, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8#A");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 4;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lT3bXK{*Z*G1A~8{b");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zSfz-<");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2992);
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Yn.'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{+<M)%o>j~5/RY~ITy%");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginObject();
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 13 path $.null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Yn.'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginObject();
      String string0 = jsonReader0.getPath();
      assertEquals("$.", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#z^\"76<hh]$OLO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5g8/Q4 (l)!k42]YLR");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#=-}H/");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/wy1sd'zF^D");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      stringReader0.reset();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'U)-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read(charArray0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      assertEquals(6, int0);
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=oDqg*9,3+KL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 14 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zF}/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N\"86]3KR]B~h\"_</mc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H:t~l}3C)W)[vu{LUj");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@H~,2}'-R>qQFU7%");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 14;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5$~@xor-(8?Nd* ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 12;
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=oDqg* 9,3+KL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 15 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AuWM^Lm}(huf[!5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 10;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B*e3hP`>(g}4Sg+1");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(yDlU{&=Ih\"4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qxmQb>E]k");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t[y");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertEquals("t", string0);
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L=+k");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals("L", string0);
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z4fX>k&:bkN5wVgl96");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertEquals("Z4fX>k&", string0);
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*W#AIL$*]xT%ji->s");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")qyF-E$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertEquals(")qyF-E$", string0);
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 8;
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read(charArray0);
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      long long0 = jsonReader0.nextLong();
      assertEquals(6L, long0);
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A,_|u!N3l~89W5-LbK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=oDqg*993+KL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 14 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#=-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5 ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
      assertEquals((-5L), long0);
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c0'>\"CqMlh");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      jsonReader0.peeked = 8;
      jsonReader0.nextDouble();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wP[}6F;\"ZQ+");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.read(charArray0);
      jsonReader0.setLenient(true);
      double double0 = jsonReader0.nextDouble();
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")Lqy/E$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3:=BeOZH'z~hWY}20$`");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]zK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      String string0 = jsonReader0.nextString();
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 100000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AuWM^Lm}(huf[!5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 17 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#=-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertEquals("column", string0);
  }

  @Test(timeout = 100000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'#-}H/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 12;
      String string0 = jsonReader0.nextName();
      assertEquals("", string0);
  }

  @Test(timeout = 100000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}$%r*`b:n-Xmr}S");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6{k(_43@b?OqMY(#");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 100000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-]O5JQu-W+D");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8[BAttzFJ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NUMBER, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=O./)r<cy$eaQ-J<f");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9;cs|O}%]*>>x~");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9,fltL'+rs6#z/j?t");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8#A");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("58q@pa`G6rHW*JeF");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2g*k/8Fo9.1K");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read(charArray0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("03}9}Ur!");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7E.^e+0LeFDFb");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9-258");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e\"1NTfQ}2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5 ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7+pP$UKy");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextNull();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]#LEE;zQsNrU");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_ARRAY at line 1 column 3 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]'gtT");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";+\"Kt~5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",geHVJ1My");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{R8L[W1r{!$!");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 6 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{0\"3/DIS?aM%8>V");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[SA.w_3A@P]#KC-/ZLm");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Ex)o8");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 7 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 14;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NAME, jsonToken0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 11;
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^;LRW=]gK");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fch|$hPtf71v#");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-216);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginObject();
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8#A");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 4;
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Ex)o8");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      String string0 = jsonReader0.getPath();
      assertEquals("$[0]", string0);
  }

  @Test(timeout = 100000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test177()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
  }

  @Test(timeout = 100000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Yn.'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
  }
}
