/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 11:54:15 GMT 2020
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<LinkedTreeMap<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<LinkedTreeMap<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>();
      Object object0 = linkedTreeMap_Node0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Integer>(linkedTreeMap_Node0, "#SW;8`&Y", linkedTreeMap_Node0, linkedTreeMap_Node0);
      Object object0 = linkedTreeMap_Node1.getKey();
      assertEquals("#SW;8`&Y", object0);
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap1.find("[]", true);
      linkedTreeMap1.removeInternalByKey(linkedTreeMap_EntrySet0);
      assertEquals(1, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(comparator0);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(linkedTreeMap_Node0, "]");
      linkedTreeMap0.putIfAbsent(linkedTreeMap1, abstractMap_SimpleImmutableEntry0);
      int int0 = linkedTreeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>> linkedTreeMap0 = new LinkedTreeMap<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>>(comparator0);
      LinkedTreeMap.Node<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      int int0 = linkedTreeMap0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Comparable<Integer>, Object> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, Object>();
      LinkedTreeMap.Node<Comparable<Integer>, Object> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey("com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator");
      assertEquals(0, linkedTreeMap0.size());
      assertNull(linkedTreeMap_Node0);
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("otO,", "otO,", biFunction0);
      linkedTreeMap0.removeInternalByKey("otO,");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>(comparator0);
      LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap1 = new LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleEntry<String, Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      LinkedTreeMap.Node<Object, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Comparable<Object>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      linkedTreeMap1.comparator = comparator1;
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("com.google.gson.internal.LinkedTreeMap$KeySet", linkedTreeMap_Node0);
      linkedTreeMap1.put(comparable0, abstractMap_SimpleEntry0);
      linkedTreeMap1.remove((Object) linkedTreeMap0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.find("h*|sKa50PK", true);
      linkedTreeMap0.keySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<Comparable<String>, Object> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, Object>();
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedTreeMap1 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      linkedTreeMap1.get(linkedTreeMap0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test12()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(comparator0);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(linkedTreeMap_Node0, "]");
      linkedTreeMap0.putIfAbsent(linkedTreeMap1, abstractMap_SimpleImmutableEntry0);
      linkedTreeMap0.get(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test13()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      linkedTreeMap0.findByObject(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-285));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(integer0, true);
      linkedTreeMap0.findByEntry(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap0.find("", false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(975);
      linkedTreeMap0.putIfAbsent(integer0, integer0);
      linkedTreeMap0.entrySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>(comparator0);
      linkedTreeMap0.size = (-1);
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>>)linkedTreeMap0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 100000)
  public void test18()  throws Throwable  {
      LinkedTreeMap<Object, LinkedTreeMap<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<Object, LinkedTreeMap<Object, Integer>>();
      LinkedTreeMap.Node<Object, LinkedTreeMap<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, LinkedTreeMap<Object, Integer>>();
      linkedTreeMap0.root = linkedTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternalByKey("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test19()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Integer>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Integer>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Integer>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test20()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.root = linkedTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedTreeMap0.put("null=null", "com.google.gson.internal.LinkedTreeMap$KeySet");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test21()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test22()  throws Throwable  {
      LinkedTreeMap<Map.Entry<Object, Map.Entry<Object, Comparable<Object>>>, Integer> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Object, Map.Entry<Object, Comparable<Object>>>, Integer>();
      Set<Map.Entry<Object, Map.Entry<Object, Comparable<Object>>>> set0 = linkedTreeMap0.keySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.find(set0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap$KeySet is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<Integer, LinkedTreeMap<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Integer, LinkedTreeMap<String, Object>>();
      Object object0 = new Object();
      boolean boolean0 = linkedTreeMap0.containsKey(object0);
      assertEquals(0, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test25()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge("otO,", "otO,", biFunction0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove("otO,");
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<Integer>, Integer> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, Integer>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove("mz{Sj_#w7e<.:wa=9");
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test27()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleEntry<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<String, Object>, String>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator1);
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap1);
      assertEquals(0, linkedTreeMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test30()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-285));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test32()  throws Throwable  {
      Integer integer0 = Integer.valueOf(4);
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test33()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, "null=null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      assertNotNull(linkedTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test34()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node0.value = (Object) linkedTreeMap0;
      assertEquals(0, linkedTreeMap0.size());
      
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>>();
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test35()  throws Throwable  {
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<String, Object> linkedTreeMap1 = linkedTreeMap_Node1.setValue(linkedTreeMap0);
      assertNull(linkedTreeMap1);
      assertEquals(0, linkedTreeMap0.size());
      
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(4);
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test37()  throws Throwable  {
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Comparable<Object>>();
      LinkedTreeMap.Node<Object, Comparable<Object>> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Comparable<Object>>(linkedTreeMap_Node1, linkedTreeMap_Node1, linkedTreeMap_Node1, linkedTreeMap_Node1);
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node2);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Map.Entry<Object, Comparable<Object>>>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Map.Entry<Object, Comparable<Object>>>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Map.Entry<Object, Comparable<Object>>>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Map.Entry<Object, Comparable<Object>>>>(linkedTreeMap_Node0, comparable0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test39()  throws Throwable  {
      Integer integer0 = Integer.valueOf(43);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      boolean boolean0 = linkedTreeMap_Node0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test40()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.keySet();
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 100000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Integer> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(comparator0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.replaceAll(biFunction0);
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Integer>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Integer>>)linkedTreeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 100000)
  public void test42()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = Integer.valueOf(43);
      Integer integer1 = new Integer(2);
      linkedTreeMap0.find(integer0, true);
      Integer integer2 = new Integer((-2393));
      linkedTreeMap0.find(integer2, true);
      linkedTreeMap0.find(integer1, true);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap0);
      Predicate<Object> predicate1 = predicate0.negate();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.removeIf(predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test43()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = Integer.valueOf(43);
      linkedTreeMap0.find(integer0, true);
      Integer integer1 = new Integer(2);
      linkedTreeMap0.find(integer1, true);
      Integer integer2 = new Integer(3473);
      linkedTreeMap0.put(integer2, integer1);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test44()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer(900);
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent(integer0, function0);
      Integer integer1 = Integer.valueOf(4);
      linkedTreeMap0.find(integer1, true);
      Integer integer2 = new Integer(1);
      linkedTreeMap0.put(integer2, integer2);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test45()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer(43);
      linkedTreeMap0.find(integer0, true);
      Integer integer1 = new Integer(2139);
      linkedTreeMap0.find(integer1, true);
      Integer integer2 = new Integer(3473);
      Object object0 = linkedTreeMap0.put(integer2, integer1);
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>(linkedTreeMap_Node0, "null=null", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1.left, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test48()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node0;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test49()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-285));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test50()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, String> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("y-Pke0", "y-Pke0");
      // Undeclared exception!
      try { 
        linkedTreeMap0.put(abstractMap_SimpleImmutableEntry0, "y-Pke0");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test51()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = Integer.valueOf((-323));
      linkedTreeMap0.find(integer0, true);
      Integer integer1 = new Integer(5);
      Integer integer2 = new Integer(19);
      linkedTreeMap0.find(integer2, true);
      linkedTreeMap0.put(integer1, integer0);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test52()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(comparator0);
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      linkedTreeMap0.remove((Object) linkedTreeMap1);
      assertEquals(0, linkedTreeMap1.size());
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test53()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap<Integer, LinkedTreeMap<Object, Object>> linkedTreeMap1 = new LinkedTreeMap<Integer, LinkedTreeMap<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.put((Integer) null, linkedTreeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test54()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<LinkedTreeMap<Integer, Object>, Comparable<Object>> linkedTreeMap1 = new LinkedTreeMap<LinkedTreeMap<Integer, Object>, Comparable<Object>>(comparator0);
      LinkedTreeMap<Integer, Object> linkedTreeMap2 = new LinkedTreeMap<Integer, Object>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      linkedTreeMap1.putIfAbsent(linkedTreeMap2, comparable0);
      boolean boolean0 = linkedTreeMap1.containsKey(linkedTreeMap_EntrySet0);
      assertEquals(1, linkedTreeMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test55()  throws Throwable  {
      LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>((Comparator<? super String>) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test56()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>> linkedTreeMap0 = new LinkedTreeMap<String, LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, String>>(comparator0);
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test57()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-285));
      linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      String string0 = linkedTreeMap_KeySet0.toString();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals("[-285]", string0);
  }

  @Test(timeout = 100000)
  public void test58()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Object>>();
      String string0 = linkedTreeMap_Node0.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 100000)
  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, AbstractMap.SimpleImmutableEntry<Map.Entry<Object, Comparable<Object>>, Integer>> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, AbstractMap.SimpleImmutableEntry<Map.Entry<Object, Comparable<Object>>, Integer>>(comparator0);
      LinkedTreeMap.Node<Map.Entry<Object, Comparable<Object>>, AbstractMap.SimpleImmutableEntry<Map.Entry<Object, Comparable<Object>>, Integer>> linkedTreeMap_Node0 = linkedTreeMap0.find((Map.Entry<Object, Comparable<Object>>) null, true);
      LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, AbstractMap.SimpleEntry<Object, String>> linkedTreeMap1 = new LinkedTreeMap<Map.Entry<Object, Comparable<Object>>, AbstractMap.SimpleEntry<Object, String>>();
      linkedTreeMap1.findByEntry(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test60()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap1 = new LinkedTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test61()  throws Throwable  {
      LinkedTreeMap<Object, LinkedTreeMap<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<Object, LinkedTreeMap<Integer, Object>>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test62()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = Integer.valueOf(43);
      linkedTreeMap0.find(integer0, true);
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Integer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test63()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test64()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }
}
