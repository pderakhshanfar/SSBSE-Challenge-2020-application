/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 11:58:41 GMT 2020
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" at line 1 column 2 path $");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" U|-TC*Yi'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-3298);
      jsonReader0.skipValue();
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextNull();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"!X4sc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"!X4sc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextInt();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2015);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" U|-T+C*Yi'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1350);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2015);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1);
      jsonReader0.hasNext();
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-278);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2015);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextLong();
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextInt();
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'k<4fzb-mV2~");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.isLenient();
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.skipValue();
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("973");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.peek();
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2813;
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RXYl");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextNull();
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 125;
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextName();
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" U|-TC*Yi'");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextLong();
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-32);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",B| @MH_c=xr@$8+mw.");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextInt();
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1545);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(3967).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextDouble();
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-1582);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oxTKa)0tI");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.nextBoolean();
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 48;
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.hasNext();
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":*>X4`+6m/v#Z>(+t");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.endObject();
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected an int but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-197);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.endArray();
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-33);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sR,]R");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.doPeek();
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      // Undeclared exception!
      jsonReader0.beginObject();
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      jsonReader0.beginArray();
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A|*xhj]BEA$<#rY)N>");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 1003;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"S38G(W8i1nsZ7#uAa");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" :zy]t;+A#3/hv1");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8[vx ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 5 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 4;
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 19;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(5.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NAME, jsonToken0);
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0{D]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 5 path $.null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(5.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$.", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#4H!H");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#4!H");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/WyL[T Rq(.");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/WyL[T Rq(.");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.nextBoolean();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 8;
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\"w+]");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 4;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".?)!&i4}");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$?L+9ph");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y9pVI\"|j-s8=y+MS");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*|7b;=QhHM");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YDg:8j;\u0007(]G-}Kr)g");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jg464k/f");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2 M,o1r1+}P;s");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(2.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+#%_BLxnZT, 4PG8");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(6, 6, 2, 6, (-377)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      jsonReader0.nextString();
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tk}QRDjYF(]Kqe");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v{*");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cpd^P$&>`^!w~W$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TqvV5??4F[o{`");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$xH0AYJDGe=t$vi{w");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      String string0 = jsonReader0.nextString();
      assertEquals("$xH0AYJDGe", string0);
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*|7b;=QhHM");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cpd^P$&>`^!w~:$");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nDlY23n(,_E");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$M'`&oW5'#3p:<0nt");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UnteminateZ commen");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UnterminateZ comment");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".5K-djWbW");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 9;
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(3967).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"S8G(0W8i1nsZ7#uAa");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      long long0 = jsonReader0.nextLong();
      assertFalse(jsonReader0.isLenient());
      assertEquals(5L, long0);
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(3967).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextNull();
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextBoolean();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.hasNext();
      boolean boolean1 = jsonReader0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("5", string0);
  }

  @Test(timeout = 100000)
  public void test127()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(3967).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test128()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.peeked = 11;
      jsonReader0.nextString();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("973");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 3688;
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}zY:+vVG?6j(-c");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4]vl");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 100000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-[?");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=P+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8;lyt*Dt?4BF");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("973");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("09");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-1!X");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ex9ected a name but waB ");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e+2?Fqmo");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected value");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]@`}`sbg_])nN ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";+-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",B");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AYC[5BJ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 8 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.NUMBER, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextDouble();
      jsonReader0.setLenient(true);
      jsonReader0.beginObject();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NAME at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test149()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.peeked = 11;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.STRING, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'k<4fzb-mV2~");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test152()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.peeked = 4;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_ARRAY at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[vzD@qE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{XtdJ\"r9D0pIU~H(AC");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
  }

  @Test(timeout = 100000)
  public void test156()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.peeked = 4;
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{D]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextDouble();
      jsonReader0.beginObject();
      String string0 = jsonReader0.nextName();
      assertEquals("D", string0);
  }

  @Test(timeout = 100000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GJzf]~GsQvZDb]D}*e");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 102;
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test164()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.peeked = 4;
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5{h]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[U&$r[j-U1Zq`+Z=>tk");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      String string0 = jsonReader0.locationString();
      assertEquals(" at line 1 column 2 path $[0]", string0);
  }

  @Test(timeout = 100000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"w+]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test169()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
  }

  @Test(timeout = 100000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
  }
}
