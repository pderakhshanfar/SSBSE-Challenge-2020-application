/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 13:24:36 GMT 2020
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      Object object0 = linkedTreeMap_Node0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Set<String> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(set0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.putIfAbsent("J", "J");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<String>>();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      Integer integer0 = new Integer(15);
      linkedTreeMap0.put(integer0, "\"l*6o67 |];<q!a");
      int int0 = linkedTreeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, String> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, String>(comparator0);
      linkedTreeMap0.size = (-315);
      int int0 = linkedTreeMap0.size();
      assertEquals((-315), int0);
  }

  @Test(timeout = 100000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<LinkedTreeMap<Object, Object>, Comparable<Integer>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Object, Object>, Comparable<Integer>>(comparator0);
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap0.find(linkedTreeMap1, true);
      linkedTreeMap0.removeInternalByKey(integer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, Map.Entry<String, String>> linkedTreeMap0 = new LinkedTreeMap<String, Map.Entry<String, String>>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(linkedTreeMap_Node0);
      linkedTreeMap0.putIfAbsent("8G8d*s2~.8.JLNK#KAx", abstractMap_SimpleEntry0);
      linkedTreeMap0.remove((Object) "8G8d*s2~.8.JLNK#KAx");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test11()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<String>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, AbstractMap.SimpleEntry<String, Object>>(comparator0);
      linkedTreeMap0.putIfAbsent("", abstractMap_SimpleEntry0);
      linkedTreeMap0.keySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<String, AbstractMap.SimpleEntry<String, Object>>(comparator0);
      LinkedTreeMap.Node<String, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, AbstractMap.SimpleEntry<String, Object>>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      linkedTreeMap0.keySet();
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test13()  throws Throwable  {
      LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer(0);
      linkedTreeMap0.get(integer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>((Comparator<? super String>) null);
      linkedTreeMap0.findByObject((Object) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test15()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.findByEntry(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Comparable<Object>> linkedTreeMap0 = new LinkedTreeMap<Object, Comparable<Object>>(comparator0);
      LinkedTreeMap.Node<Comparable<Object>, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, String>();
      Comparable<Object> comparable0 = linkedTreeMap_Node0.key;
      linkedTreeMap0.find(comparable0, false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Map.Entry<Integer, String>, Object> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Integer, String>, Object>(comparator0);
      Set<Map.Entry<Map.Entry<Integer, String>, Object>> set0 = (Set<Map.Entry<Map.Entry<Integer, String>, Object>>)linkedTreeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 100000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<LinkedTreeMap<Object, Object>, Comparable<Integer>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Object, Object>, Comparable<Integer>>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap0.find(linkedTreeMap1, true);
      linkedTreeMap0.entrySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test19()  throws Throwable  {
      LinkedTreeMap<Integer, Integer> linkedTreeMap0 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap0.size = (-2135);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)linkedTreeMap0.entrySet();
      assertEquals((-2135), set0.size());
  }

  @Test(timeout = 100000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<LinkedTreeMap<Object, String>, Object> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Object, String>, Object>(comparator0);
      LinkedTreeMap.Node<LinkedTreeMap<Object, String>, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<LinkedTreeMap<Object, String>, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      LinkedTreeMap.Node<LinkedTreeMap<Object, String>, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<LinkedTreeMap<Object, String>, Object>(linkedTreeMap_Node0, linkedTreeMap1, linkedTreeMap_Node0, linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test21()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.root = linkedTreeMap_Node0;
      // Undeclared exception!
      try { 
        linkedTreeMap0.put("com.google\"gson.internal.LinkedTreeMap$1", "com.google\"gson.internal.LinkedTreeMap$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test22()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Integer> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("dFIT.27", integer0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry1);
      // Undeclared exception!
      try { 
        linkedTreeMap0.put(abstractMap_SimpleEntry0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<String, Map.Entry<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<String, Map.Entry<Integer, Object>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<LinkedTreeMap<Integer, Object>, Map.Entry<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Integer, Object>, Map.Entry<Object, Object>>();
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>(comparator0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(linkedTreeMap1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test25()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<String>>();
      LinkedTreeMap.Node<Integer, Comparable<String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<String>>();
      linkedTreeMap0.root = linkedTreeMap_Node0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.containsKey(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 100000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap$1", "com.google.gson.internal.LinkedTreeMap$1");
      linkedTreeMap0.put("", "com.google.gson.internal.LinkedTreeMap$1");
      linkedTreeMap0.put("E", "");
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test27()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<String>>();
      Integer integer0 = new Integer(0);
      linkedTreeMap0.putIfAbsent(integer0, "[]");
      boolean boolean0 = linkedTreeMap0.containsKey(integer0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test28()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<String>>();
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(" sr/WW>4\"k9L%N;", " sr/WW>4\"k9L%N;");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(" sr/WW>4\"k9L%N;");
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test30()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Integer>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Set<LinkedTreeMap<Object, String>> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(set0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test32()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "\nr&9UPvv", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.right = linkedTreeMap_Node0;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      assertNotNull(linkedTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test33()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedTreeMap<Object, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedTreeMap<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(linkedTreeMap_EntrySet0, (String) null);
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedTreeMap<Object, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedTreeMap<Object, Object>>(linkedTreeMap_Node0, abstractMap_SimpleImmutableEntry0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, LinkedTreeMap<Object, Object>> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertNotNull(linkedTreeMap_Node2);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test34()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      linkedTreeMap_Node0.value = comparable0;
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test35()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      Integer integer0 = new Integer(3702);
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, "com.google.gson.internal.LinkedTreeMap$1");
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = linkedTreeMap_Node1.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test36()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>("com.google.gson.internal.LinkedTreeMap$EntrySet$1", "com.google.gson.internal.LinkedTreeMap$EntrySet$1");
      boolean boolean0 = linkedTreeMap_Node0.equals(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test37()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      Integer integer0 = new Integer(1);
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      boolean boolean0 = linkedTreeMap_Node0.equals("[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test39()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>();
      linkedTreeMap0.keySet();
      Set<AbstractMap.SimpleImmutableEntry<String, String>> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 100000)
  public void test40()  throws Throwable  {
      LinkedTreeMap<String, Map.Entry<String, String>> linkedTreeMap0 = new LinkedTreeMap<String, Map.Entry<String, String>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>(comparator0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap1.containsValue(linkedTreeMap0);
      linkedTreeMap1.replaceAll(biFunction0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test41()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("com.google.gson.intenal.LikedTreeMap1", "com.google.gson.intenal.LikedTreeMap1");
      linkedTreeMap0.put("", "com.google.gson.intenal.LikedTreeMap1");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      linkedTreeMap0.compute("com.google.gson.intenal.LikedTreeMap1", biFunction0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test42()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("lq0'5^4P[\"p8t+", "com.google.gson.internal.LinkedTreeMap$1");
      linkedTreeMap0.putIfAbsent("com.google.gson.internal.LinkedTreeMap$1", "lq0'5^4P[\"p8t+");
      linkedTreeMap0.put("", (String) null);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test43()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.putIfAbsent("", "hgb");
      linkedTreeMap0.putIfAbsent("com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator", "|{kj[SEdj)n$28L>G");
      String string0 = linkedTreeMap0.put("|{kj[SEdj)n$28L>G", "");
      assertNull(string0);
  }

  @Test(timeout = 100000)
  public void test44()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.putIfAbsent("", "");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>("", "");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.findByEntry(abstractMap_SimpleEntry0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.retainAll(linkedTreeMap_EntrySet0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test45()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("", "v#yf}\"[OP\f@a+");
      linkedTreeMap0.putIfAbsent("v#yf}\"[OP\f@a+", "hgb");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedTreeMap_KeySet0.retainAll(linkedList0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test46()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(" sr/WW>4\"k9L%N;", " sr/WW>4\"k9L%N;");
      linkedTreeMap0.putIfAbsent("W}LxG^b9fM$F", "U");
      linkedTreeMap0.put("", " sr/WW>4\"k9L%N;");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.retainAll(linkedTreeMap_EntrySet0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test47()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("\nr&9UPvv", "\nr&9UPvv");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "\nr&9UPvv", linkedTreeMap_Node0, linkedTreeMap_Node0);
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>(linkedTreeMap_Node1);
      abstractMap_SimpleEntry0.setValue("\nr&9UPvv");
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test48()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("", (String) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>("", (Comparable<String>) null);
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test49()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(" sr/WW>4\"k9L%N;", " sr/WW>4\"k9L%N;");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, Comparable<String>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Comparable<String>>(" sr/WW>4\"k9L%N;", (Comparable<String>) null);
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test50()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<Integer>, LinkedTreeMap<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, LinkedTreeMap<Object, Integer>>(comparator0);
      LinkedTreeMap.Node<Comparable<Integer>, LinkedTreeMap<Object, Integer>> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey((Object) null);
      assertNull(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test51()  throws Throwable  {
      LinkedTreeMap<String, Comparable<Integer>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<Integer>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test52()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(" sr/WW>4\"k9L%N;", " sr/WW>4\"k9L%N;");
      linkedTreeMap0.putIfAbsent("W}LxG^b9fM$F", "U");
      linkedTreeMap0.put("U", " sr/WW>4\"k9L%N;");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.retainAll(linkedTreeMap_EntrySet0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test53()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.putIfAbsent("", "");
      linkedTreeMap0.put("", "g&wFi7YOib]L!c`;|F");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Object, Object>, Comparable<String>>(comparator0);
      linkedTreeMap0.remove((Object) integer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test55()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((String) null, "com.google.gson.internal.LinkedTreeMap$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test56()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<String>>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedTreeMap0.containsKey(integer0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test57()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<Object, String>, Object> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<Object, String>, Object>((Comparator<? super LinkedTreeMap<Object, String>>) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<LinkedTreeMap<Object, String>, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test58()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<Object, String>, LinkedTreeMap<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Object, String>, LinkedTreeMap<Object, Object>>();
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test59()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put("com.google.gson.internal.LinkedTreeMap$1", "com.google.gson.internal.LinkedTreeMap$1");
      boolean boolean0 = linkedTreeMap0.containsValue((Object) null);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test60()  throws Throwable  {
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = linkedTreeMap_Node0.setValue(comparable0);
      assertNull(comparable1);
      
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Comparable<Object>>();
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test61()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      String string0 = linkedTreeMap_Node0.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 100000)
  public void test62()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test63()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      linkedTreeMap0.put(" sr/WW>4\"k9L%N;", " sr/WW>4\"k9L%N;");
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test64()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Integer, Object>, LinkedTreeMap<String, Integer>>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }
}
