/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 12:14:31 GMT 2020
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>();
      String string0 = linkedTreeMap_Node0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      LinkedTreeMap.Node<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      Comparable<String> comparable0 = linkedTreeMap_Node0.getKey();
      assertNull(comparable0);
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      LinkedTreeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> linkedTreeMap0 = new LinkedTreeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap<String, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap1 = new LinkedTreeMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = Integer.valueOf(1290);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>("*qXgvO/qmY4N/lxS@B", integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      linkedTreeMap1.putIfAbsent("*qXgvO/qmY4N/lxS@B", abstractMap_SimpleEntry0);
      linkedTreeMap1.removeInternalByKey(linkedTreeMap0);
      assertEquals(1, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("4}x3iX!,ld[@R", function0);
      int int0 = linkedTreeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap<String, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap1 = new LinkedTreeMap<String, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = linkedTreeMap1.removeInternalByKey(linkedTreeMap0);
      assertNull(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test09()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("", function0);
      linkedTreeMap0.removeInternalByKey("");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.remove((Object) "3@}=mHF");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Map.Entry<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<String, Object>, String>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap0.putIfAbsent(linkedTreeMap_Node0.left, "");
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("!tlX_Oh", linkedTreeMap0);
      linkedTreeMap0.put(abstractMap_SimpleImmutableEntry0, (String) null);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test12()  throws Throwable  {
      LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(linkedTreeMap_Node0);
      linkedTreeMap0.put("B)g5Sk22sE&7-", abstractMap_SimpleImmutableEntry0);
      linkedTreeMap0.keySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, LinkedTreeMap<String, Object>> linkedTreeMap0 = new LinkedTreeMap<String, LinkedTreeMap<String, Object>>(comparator0);
      LinkedTreeMap.Node<String, LinkedTreeMap<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, LinkedTreeMap<String, Object>>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      linkedTreeMap0.keySet();
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test14()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, String>();
      LinkedTreeMap<Comparable<Integer>, Object> linkedTreeMap1 = new LinkedTreeMap<Comparable<Integer>, Object>();
      linkedTreeMap1.get(linkedTreeMap0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.get("3@}=mHF");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Comparable<Integer>> linkedTreeMap0 = new LinkedTreeMap<Object, Comparable<Integer>>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, AbstractMap.SimpleEntry<Integer, Object>> linkedTreeMap1 = new LinkedTreeMap<Object, AbstractMap.SimpleEntry<Integer, Object>>(comparator1);
      linkedTreeMap1.findByObject(linkedTreeMap0);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test17()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("D*7g~2>", function0);
      linkedTreeMap0.findByObject("D*7g~2>");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test18()  throws Throwable  {
      LinkedTreeMap<Comparable<String>, Integer> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, Integer>();
      linkedTreeMap0.find("null=null", false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test19()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<String>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Integer, Comparable<String>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test20()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<String, Integer>, Integer> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>(linkedTreeMap_Node0);
      Integer integer0 = Integer.valueOf((-4731));
      // Undeclared exception!
      try { 
        linkedTreeMap0.put(abstractMap_SimpleEntry0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test22()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<Map.Entry<String, Object>>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<Map.Entry<String, Object>>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Integer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, String>();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(linkedTreeMap1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test24()  throws Throwable  {
      LinkedTreeMap.Node<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedTreeMap.Node<Comparable<String>, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
  }

  @Test(timeout = 100000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Object>, Map.Entry<String, Object>>(comparator0);
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>>(linkedTreeMap_Node0, comparable0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      boolean boolean0 = linkedTreeMap1.containsKey(linkedTreeMap0);
      assertEquals(0, linkedTreeMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test27()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(comparator0);
      Map.Entry<Object, String> map_Entry0 = (Map.Entry<Object, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(map_Entry0).getKey();
      doReturn((Object) null).when(map_Entry0).getValue();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(map_Entry0);
      linkedTreeMap0.find(abstractMap_SimpleImmutableEntry0, true);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(1, linkedTreeMap0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator1);
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove((Object) null);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test30()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test31()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap<Object, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<Object, Comparable<String>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap1);
      assertEquals(0, linkedTreeMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test33()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test34()  throws Throwable  {
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node0;
      // Undeclared exception!
      linkedTreeMap_Node0.first();
  }

  @Test(timeout = 100000)
  public void test35()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, "");
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      boolean boolean0 = linkedTreeMap_Node0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test36()  throws Throwable  {
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      Integer integer0 = new Integer(62);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(linkedTreeMap0, integer0);
      linkedTreeMap_Node0.value = abstractMap_SimpleEntry0;
      assertEquals(0, linkedTreeMap0.size());
      
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test37()  throws Throwable  {
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<String>>();
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Comparable<String>>(linkedTreeMap_Node0, "com.google.gson.internal.LinkedTreeMap$1", linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test39()  throws Throwable  {
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test40()  throws Throwable  {
      LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      boolean boolean0 = linkedTreeMap_Node0.equals("?o[q+ee$%&");
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, LinkedTreeMap<String, Object>> linkedTreeMap0 = new LinkedTreeMap<String, LinkedTreeMap<String, Object>>(comparator0);
      linkedTreeMap0.keySet();
      Set<String> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 100000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Map.Entry<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<String, Object>, String>(comparator0);
      linkedTreeMap0.entrySet();
      Set<Map.Entry<Map.Entry<String, Object>, String>> set0 = (Set<Map.Entry<Map.Entry<String, Object>, String>>)linkedTreeMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 100000)
  public void test43()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Object object0 = linkedTreeMap0.computeIfAbsent("yF8vh!x|[!", function0);
      linkedTreeMap0.computeIfAbsent("] p", function0);
      Object object1 = linkedTreeMap0.computeIfAbsent("com.google.gson.internal.LinkedTreeMap$EntrySet$1", function0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 100000)
  public void test44()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.computeIfAbsent("v8?h!x|!", function0);
      linkedTreeMap0.computeIfAbsent("E?", function0);
      linkedTreeMap0.computeIfAbsent("", function0);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test45()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.computeIfAbsent("] p", function0);
      linkedTreeMap0.computeIfAbsent("b", function0);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Object>, Map.Entry<String, Object>>(comparator0);
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Comparable<Object>, Map.Entry<String, Object>>(linkedTreeMap_Node0, comparable0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test47()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.computeIfAbsent("5>u[b=WSB'tu|9:;(!", function0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedTreeMap0.entrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.removeAll(set0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test48()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("4}x3iX!,ld[@R", function0);
      linkedTreeMap0.computeIfAbsent("", function0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedTreeMap0.entrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.removeAll(set0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test49()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("4}x3iX!,ld[@R", function0);
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.computeIfAbsent("5>u[b=WSB'tu|9:;(!", function0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)linkedTreeMap0.entrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.removeAll(set0);
      assertEquals(0, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test50()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("5>u[b=WSB'tu|9:;(!", function0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node0, "5>u[b=WSB'tu|9:;(!", linkedTreeMap_Node0, linkedTreeMap_Node0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(linkedTreeMap_Node1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test51()  throws Throwable  {
      LinkedTreeMap<Comparable<String>, Integer> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, Integer>();
      LinkedTreeMap.Node<Map.Entry<String, Object>, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Map.Entry<String, Object>, Object>();
      linkedTreeMap0.findByEntry(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test52()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, String> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, String>();
      linkedTreeMap0.remove((Object) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test53()  throws Throwable  {
      Function<Object, Object> function0 = Function.identity();
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.computeIfAbsent("3@}=mHF", function0);
      linkedTreeMap0.computeIfAbsent("] p", function0);
      linkedTreeMap0.computeIfAbsent("3]zi", function0);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test54()  throws Throwable  {
      LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedTreeMap0 = new LinkedTreeMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((String) null, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test55()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("?o[q+ee$%&", function0);
      boolean boolean0 = linkedTreeMap0.containsKey("?o[q+ee$%&");
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test56()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test57()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test58()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      Function<Object, Object> function0 = Function.identity();
      linkedTreeMap0.computeIfAbsent("o", function0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      String string0 = linkedTreeMap_KeySet0.toString();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals("[o]", string0);
  }

  @Test(timeout = 100000)
  public void test59()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, String>, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = linkedTreeMap_Node0.setValue(integer0);
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test60()  throws Throwable  {
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<String>>();
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Comparable<String>>(linkedTreeMap_Node0, "com.google.gson.internal.LinkedTreeMap$1", linkedTreeMap_Node0, linkedTreeMap_Node0);
      String string0 = linkedTreeMap_Node1.toString();
      assertEquals("com.google.gson.internal.LinkedTreeMap$1=null", string0);
  }

  @Test(timeout = 100000)
  public void test61()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.Node<String, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<Object>>();
      LinkedTreeMap.Node<String, Comparable<Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Comparable<Object>>(linkedTreeMap_Node0, "8V^  *b0^Q}|Kb-Ui", linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap_Node1);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test62()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test63()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }
}
