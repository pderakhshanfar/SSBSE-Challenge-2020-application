/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 13:18:43 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.ParameterizedTypeFixtures;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      Long long0 = new Long((-2141L));
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      gson0.toJson(jsonElement0, (Appendable) charArrayWriter0);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      HashMap<Type, InstanceCreator<String>> hashMap0 = new HashMap<Type, InstanceCreator<String>>();
      Class<Type> class0 = Type.class;
      TypeToken.get(class0);
      gson0.fromJson("", (Type) class0);
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) string0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Class<?>) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      JsonReader jsonReader0 = null;
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Double>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      Double double0 = new Double(2113.188);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) atomicLongArray0);
      AtomicLongArray atomicLongArray1 = new AtomicLongArray(longArray0);
      Class<Long> class0 = Long.TYPE;
      StringWriter stringWriter0 = new StringWriter(8);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[java.lang.Long@0000000025]");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray1, (Type) class0, (Appendable) stringWriter1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.atomic.AtomicLongArray cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      gson0.fromJson("", class0);
      gson0.toString();
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)96);
      gson0.toJsonTree((Object) short0);
      gson0.toString();
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      TypeToken.getParameterized(class0, typeArray0);
      gson0.getAdapter(typeToken0);
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<HashMap<Short, Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<HashMap<Short, Object>>();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: long. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      gson0.fieldNamingStrategy();
      Gson gson1 = new Gson();
      StringReader stringReader0 = new StringReader("");
      Class<Character> class0 = Character.TYPE;
      gson1.fromJson((Reader) stringReader0, (Type) class0);
      gson1.toString();
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Byte byte0 = new Byte((byte)1);
      gson0.toJson((Object) byte0);
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      Gson gson1 = new Gson();
      gson1.getAdapter(typeToken0);
      Short short0 = new Short((byte)1);
      MockFile mockFile0 = new MockFile(string0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      gson1.toJson((Object) short0, (Appendable) mockPrintStream0);
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      gson0.fieldNamingStrategy();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gsonBuilder0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.GsonBuilder cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedOutputStream0);
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      // Undeclared exception!
      try { 
        jsonNull1.getAsJsonArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Array: null
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double(1.0);
      gson0.toJson((Object) double0);
      gson0.excluder();
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      StringWriter stringWriter0 = new StringWriter(823);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Boolean boolean0 = new Boolean(false);
      JsonWriter jsonWriter1 = jsonWriter0.value(boolean0);
      String string0 = "l{(&6+_8`0'W>8K";
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("l{(&6+_8`0'W>8K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      JsonArray jsonArray0 = new JsonArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.google.gson.Gson$FutureTypeAdapter");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 25);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(bufferedWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.name("com.google.gson.Gson$FutureTypeAdapter");
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn((-1490), 33, (-1490), 33, (-1490)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray> parameterizedTypeFixtures_MyParameterizedTypeInstanceCreator0 = (ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>) mock(ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      gson0.fromJson(reader0, class1);
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      MockDate mockDate0 = new MockDate();
      Class<Byte> class0 = Byte.TYPE;
      Class<Float> class1 = Float.TYPE;
      gson0.toJson((Object) null, (Type) class1);
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter");
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Byte> class0 = Byte.class;
      TypeToken.get(class0);
      MockDate mockDate0 = new MockDate((-3516), (-4114), (-4114), 2, (-2906));
      gson0.toJsonTree((Object) mockDate0);
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      Class<Short> class0 = Short.TYPE;
      gson0.toJsonTree((Object) atomicLong0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) gson0);
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("NF3'");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) bigDecimal0);
      Boolean boolean0 = Boolean.valueOf("NF3'");
      JsonWriter jsonWriter3 = jsonWriter2.value(boolean0);
      JsonWriter jsonWriter4 = jsonWriter3.value("");
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter4);
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      Long long0 = new Long(2473L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      jsonElement0.getAsBoolean();
      Class<Double> class0 = Double.class;
      gson0.fromJson(jsonElement0, class0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      gson0.newJsonReader(stringReader0);
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(448.37F);
      Float.isFinite(448.37F);
      Float.max(448.37F, 448.37F);
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) float0, (Type) class0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((String) null, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = Gson.DEFAULT_LENIENT;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      gson0.newJsonWriter(mockPrintWriter0);
      gson0.excluder();
      // Undeclared exception!
      gson0.toJson((Object) pipedOutputStream0);
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) string0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson("6,F^v!thc!zc", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = new Object();
      gson0.toJson(object0);
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
      gson0.toJson((JsonElement) null);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("null");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "BOOLEAN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // BOOLEAN
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-84);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) atomicLongArray0);
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(" |t$_[LU");
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      StringWriter stringWriter0 = new StringWriter(823);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      gson0.fromJson("", class0);
      gson0.toString();
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)96);
      gson0.toJsonTree((Object) short0);
      gson0.toString();
      TypeToken.get(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>>();
      Gson gson1 = new Gson();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      JsonWriter jsonWriter0 = gson1.newJsonWriter(mockPrintWriter0);
      ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray> parameterizedTypeFixtures_MyParameterizedTypeInstanceCreator0 = new ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>((AtomicLongArray) null);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write(jsonWriter0, parameterizedTypeFixtures_MyParameterizedTypeInstanceCreator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      Long long0 = new Long(2473L);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      jsonElement0.getAsBoolean();
      Class<Double> class0 = Double.class;
      gson0.fromJson(jsonElement0, class0);
      StringReader stringReader0 = new StringReader("");
      gson0.fromJson((Reader) stringReader0, class0);
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<? super Object> class1 = typeToken0.getRawType();
      String string0 = "[]";
      MockPrintStream mockPrintStream0 = new MockPrintStream("[]");
      gson0.toJson((Object) excluder0, (Type) class1, (Appendable) mockPrintStream0);
      Gson.FutureTypeAdapter<InstanceCreator<AtomicLong>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<InstanceCreator<AtomicLong>>();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      Class<? super Object> class1 = typeToken0.getRawType();
      gson0.fromJson("", (Type) class1);
      gson0.newBuilder();
      gson0.toString();
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Excluder excluder0 = Excluder.DEFAULT;
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      char[] charArray0 = new char[4];
      Class<Date> class1 = Date.class;
      gson0.getAdapter(class1);
      charArray0[0] = '`';
      charArray0[1] = 'P';
      charArray0[2] = 'W';
      charArray0[3] = 'x';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigInteger0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      Excluder excluder0 = new Excluder();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(true, true);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, true, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-917);
      intArray0[2] = 34;
      intArray0[3] = (-1031);
      intArray0[4] = 2679;
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      TypeAdapter<AtomicLong> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Class<String> class1 = String.class;
      gson0.fromJson(" ~z", class1);
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(" M2");
      Class<String> class0 = String.class;
      gson0.fromJson((Reader) stringReader0, class0);
      Class<AtomicLong> class1 = AtomicLong.class;
      try { 
        gson0.fromJson("[e", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      gson0.toJson((Object) pipedWriter0, (Appendable) pipedWriter0);
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.fieldNamingStrategy();
      Gson gson1 = new Gson();
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      AtomicLong atomicLong0 = new AtomicLong((-1404L));
      gson0.toJson((Object) atomicLong0);
      gson0.toString();
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) atomicLongArray0);
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<Excluder>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((Object) null, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("kx+2tP");
      Class<String> class0 = String.class;
      gson0.fromJson((Reader) stringReader0, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)1);
      Class<Double> class0 = Double.TYPE;
      gson0.toJson((Object) short0, (Type) class0);
      Gson gson1 = new Gson();
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)1;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder3 = excluder2.disableInnerClassSerialization();
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder3, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize double
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(65279);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.close();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(pipedWriter0);
      System.setCurrentTimeMillis(65279);
      Long long0 = new Long(10L);
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      try { 
        gson0.toJson(jsonElement0, jsonWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.excluder();
      gson0.fieldNamingStrategy();
      Class<BigDecimal> class1 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class1);
      TypeToken.get((Type) class0);
      gson0.getAdapter(typeToken0);
      Class<Integer> class2 = Integer.class;
      gson0.fromJson((String) null, class2);
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      gson_FutureTypeAdapter0.nullSafe();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.close();
      jsonReader0.isLenient();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      StringReader stringReader0 = new StringReader("Z");
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<DefaultDateTypeAdapter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      Class<Float> class0 = Float.TYPE;
      gson0.fromJson(jsonElement0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      long long0 = 1923L;
      AtomicLong atomicLong0 = new AtomicLong(1923L);
      Class<Integer> class0 = Integer.TYPE;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((Object) atomicLong0, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[7];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      gson0.toJsonTree((Object) atomicLongArray0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("~5");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) "");
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      Boolean boolean0 = Boolean.FALSE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      PipedReader pipedReader0 = new PipedReader(65279);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.close();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(pipedWriter0);
      System.setCurrentTimeMillis(65279);
      System.setCurrentTimeMillis((-502L));
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      Long long0 = new Long(65279);
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      try { 
        gson0.toJson(jsonElement0, jsonWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      Gson gson1 = new Gson();
      String string0 = gson1.toString();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken.get(class0);
      Gson gson2 = new Gson();
      File file0 = MockFile.createTempFile(string0, "%a|3vuG=Ys(", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      gson2.newJsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) gson2, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson cannot be cast to java.math.BigDecimal
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$17", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      TypeAdapter<DefaultDateTypeAdapter> typeAdapter0 = gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeAdapter0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      Class<String> class1 = String.class;
      TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      gson0.toString();
      typeToken0.toString();
      Class<Integer> class2 = Integer.TYPE;
      gson0.fromJson((String) null, (Type) class2);
      gson0.getAdapter(typeToken0);
      gson0.toString();
      Class<AtomicLong> class3 = AtomicLong.class;
      gson0.getAdapter(class3);
      gson0.fromJson((String) null, (Type) class2);
      String string0 = "BOOLEAN";
      String string1 = "I`$?9";
      try { 
        MockURI.URI("{serializeNulls:", "{serializeNulls:", "{serializeNulls:", "I`$?9", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: {serializeNulls:://%7BserializeNulls:%7BserializeNulls:?I%60$?9#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint(1.0);
      Excluder excluder0 = new Excluder();
      int[] intArray0 = null;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = gson0.toString();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Gson gson2 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      JsonWriter jsonWriter0 = gson1.newJsonWriter(mockPrintWriter0);
      gson2.toJson((JsonElement) jsonObject0, jsonWriter0);
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      StringReader stringReader0 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Double>();
      gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter1.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      gson0.fromJson((JsonElement) null, (Type) null);
      Short short0 = new Short((short)5);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) short0, (Type) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.excluder();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      StringWriter stringWriter0 = new StringWriter(43);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      PipedReader pipedReader0 = new PipedReader(43);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter1);
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        gson1.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Byte byte0 = new Byte((byte)1);
      gson0.toJson((Object) byte0);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) string0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = Character.valueOf('K');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"K\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double(0.0);
      Double.max(0.0, 0.0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) double0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Class<Byte> class1 = Byte.class;
      TypeToken.get(class1);
      Class<Type> class2 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class2);
      Gson gson1 = new Gson();
      gson1.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 2343L;
      longArray0[2] = 0L;
      longArray0[3] = (-1436L);
      longArray0[4] = 0L;
      longArray0[5] = (-1607L);
      longArray0[6] = (-1563L);
      longArray0[7] = 0L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      StringWriter stringWriter0 = new StringWriter(1);
      JsonWriter jsonWriter0 = gson1.newJsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.name("r*r");
      JsonWriter jsonWriter2 = jsonWriter1.nullValue();
      JsonWriter jsonWriter3 = jsonWriter2.beginObject();
      // Undeclared exception!
      try { 
        gson1.toJson((Object) atomicLongArray0, (Type) class2, jsonWriter3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      gson0.excluder();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<Integer>) null);
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("JsonWriter is closed.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"JsonWriter\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      gson0.fromJson("", class0);
      gson0.toString();
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)96);
      gson0.toJsonTree((Object) short0);
      gson0.toString();
      TypeToken.get(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[1] = (Type) class0;
      Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>>();
      Class<Double> class1 = Double.class;
      gson0.fromJson((JsonElement) null, class1);
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(2645.0);
      gson0.toJson((Object) float0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("com.google.gson.JsonPrimitive", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.JsonPrimitive\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("XO<mx)!fGNhT$R/G;`", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      Gson.checkValidFloatingPoint((-1440.3));
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      Gson.checkValidFloatingPoint((-1440.3));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = new Locale("", "", "");
      Object[] objectArray0 = new Object[0];
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.printf(locale0, "qJ", objectArray0);
      MockPrintWriter mockPrintWriter2 = (MockPrintWriter)mockPrintWriter1.append('P');
      MockPrintWriter mockPrintWriter3 = (MockPrintWriter)mockPrintWriter2.append('3');
      gson0.newJsonWriter(mockPrintWriter3);
      Class<Short> class0 = Short.class;
      gson0.fromJson("", class0);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-1.0));
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) double0, (Type) class0);
      JsonWriter jsonWriter0 = null;
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      Gson.checkValidFloatingPoint(446.6);
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Integer> class0 = Integer.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<HashMap<Short, Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<HashMap<Short, Object>>();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      TypeAdapter<DefaultDateTypeAdapter> typeAdapter0 = gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeAdapter0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson1.toJsonTree((Object) null, (Type) class0);
      // Undeclared exception!
      try { 
        jsonElement0.getAsJsonArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Array: null
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("ZKQ9\"", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      gson0.toString();
      Class<Integer> class1 = Integer.TYPE;
      gson0.fromJson((String) null, (Type) class1);
      gson0.toString();
      Class<AtomicLong> class2 = AtomicLong.class;
      String string0 = "BOOLEAN";
      Byte byte0 = new Byte((byte) (-123));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) byte0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("", (Type) class0);
      gson0.toString();
      Byte byte0 = new Byte((byte)118);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(1315L);
      gson0.toJson((Object) long0);
      Excluder excluder0 = new Excluder();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, true);
      excluder0.withExclusionStrategy(mockExclusionStrategy0, true, false);
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("`}qOMU,wlA.", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"`\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(1315L);
      gson0.toJson((Object) long0);
      Excluder excluder0 = new Excluder();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, true);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, true, false);
      Excluder excluder2 = excluder1.disableInnerClassSerialization();
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      HashMap<Type, InstanceCreator<String>> hashMap0 = new HashMap<Type, InstanceCreator<String>>();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Type> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(typeAdapter0);
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader(" M2");
      Class<String> class0 = String.class;
      gson0.fromJson((Reader) stringReader0, class0);
      Class<DefaultDateTypeAdapter> class1 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class1);
      Type type0 = typeToken0.getType();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) type0, (Type) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.TYPE;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(1066).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray> parameterizedTypeFixtures_MyParameterizedTypeInstanceCreator0 = (ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<AtomicLongArray>) mock(ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator.class, new ViolatedAssumptionAnswer());
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Double> class1 = Double.class;
      gson0.fromJson("", (Type) class1);
      // Undeclared exception!
      try { 
        gson0.fromJson(reader0, class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: char. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      gson0.toJsonTree((Object) null, (Type) class0);
      MockFile mockFile0 = new MockFile("W2{Cg$E7_JC9#5c", "");
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (Appendable) mockPrintWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.excluder();
      gson0.fieldNamingStrategy();
      gson0.serializeNulls();
      Gson gson1 = new Gson();
      Boolean boolean0 = Boolean.valueOf(false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson1.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonNull1, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("q'W)6zzWeP-]RL6M[(", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) double0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      StringReader stringReader0 = new StringReader("YE yho}X");
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Class<Float> class0 = Float.class;
      gson1.getAdapter(class0);
      // Undeclared exception!
      try { 
        gson1.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.fieldNamingStrategy();
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Gson.checkValidFloatingPoint(0.0);
      excluder0.disableInnerClassSerialization();
      gson0.toJson((Object) gson0);
      Double double0 = new Double((-2292.59976978));
      Class<Short> class0 = Short.TYPE;
      gson0.toJson((Object) double0, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.excluder();
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Byte>();
      StringWriter stringWriter0 = new StringWriter(823);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      Class<Type> class0 = Type.class;
      TypeToken.get(class0);
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        gson1.fromJson("Df^mqw5t4dKWZ||5]8", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) bigDecimal0);
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      gson0.fromJson(jsonElement0, type0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, "com.google.gson.internal.bind.TypeAdapters$23");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.TYPE;
      gson0.fromJson("", (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double(1.0);
      gson0.toJson((Object) null);
      gson0.excluder();
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      StringWriter stringWriter0 = new StringWriter(36);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(false);
      Boolean boolean2 = Boolean.valueOf(false);
      jsonWriter0.value(boolean2);
      // Undeclared exception!
      try { 
        jsonWriter0.jsonValue("com.google.gson.internal.UnsafeAllocator$3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[17];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.atomic.AtomicLongArray cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(448.37F);
      Float.isFinite(632.0F);
      Float.max(632.0F, 632.0F);
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Class<Short> class1 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.888F);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) float0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Excluder excluder0 = new Excluder();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(true, true);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, true, true);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder3 = excluder2.withVersion(0.0);
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = excluder3.create(gson0, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Double double0 = new Double((-2257.57942));
      Double double1 = new Double(0.0);
      gson_FutureTypeAdapter0.toJsonTree(double1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Excluder$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken.get(class0);
      gson0.toString();
      Class<Integer> class1 = Integer.TYPE;
      gson0.fromJson((String) null, (Type) class1);
      gson0.toString();
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      
      Gson gson1 = new Gson();
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean2);
      Class<String> class2 = String.class;
      Object object0 = gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class2);
      assertTrue(gson0.htmlSafe());
      assertNotNull(object0);
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeToken<DefaultDateTypeAdapter> typeToken0 = null;
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<DefaultDateTypeAdapter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("kx+2tP");
      Class<Character> class0 = Character.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2318);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('?');
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) stringReader0, (Type) class0, jsonWriter1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.Character
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$15", e);
      }
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson(jsonReader0, (Type) class0);
      JsonArray jsonArray0 = new JsonArray(0);
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      long[] longArray0 = new long[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Float> class0 = Float.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      gson0.fromJson("", class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }
}
