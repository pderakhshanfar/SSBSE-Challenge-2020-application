/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 13:28:05 GMT 2020
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<Comparable<Object>, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, Comparable<Object>>();
      Comparable<Object> comparable0 = linkedTreeMap_Node0.getValue();
      assertNull(comparable0);
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Object object0 = linkedTreeMap_Node0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, LinkedTreeMap<String, String>> linkedTreeMap0 = new LinkedTreeMap<Object, LinkedTreeMap<String, String>>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.gson.internal.LinkedTreeMap$KeySet$1").when(biFunction0).apply(anyString() , any());
      linkedTreeMap0.compute(":I( gD^G|3<xYV(", biFunction0);
      Integer integer0 = new Integer((-282));
      linkedTreeMap0.remove((Object) integer0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      linkedTreeMap0.size = 10;
      int int0 = linkedTreeMap0.size();
      assertEquals(10, int0);
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> linkedTreeMap0 = new LinkedTreeMap<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>(comparator0);
      LinkedTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<String, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      int int0 = linkedTreeMap0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Integer, Comparable<Object>> linkedTreeMap0 = new LinkedTreeMap<Integer, Comparable<Object>>();
      LinkedTreeMap.Node<Integer, Comparable<Object>> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey("Yz%Y0SIbNaO");
      assertNull(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test09()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%g0SIN9O", "Yz%g0SIN9O");
      linkedTreeMap0.removeInternalByKey("Yz%g0SIN9O");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test10()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.put("w8", "w8");
      linkedTreeMap0.put("w8", "w8");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.putIfAbsent("BiqLe'or]B_", "");
      linkedTreeMap0.keySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Map.Entry<Object, String>> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Map.Entry<Object, String>>(comparator0);
      linkedTreeMap0.size = (-1076);
      Set<AbstractMap.SimpleImmutableEntry<Object, Integer>> set0 = linkedTreeMap0.keySet();
      assertEquals((-1076), set0.size());
  }

  @Test(timeout = 100000)
  public void test13()  throws Throwable  {
      LinkedTreeMap.Node<String, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<Object>>();
      LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>>();
      linkedTreeMap0.get(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.putIfAbsent("BiqLe'or]B_", "");
      linkedTreeMap0.get(linkedTreeMap0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<Object, String>, Integer> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      linkedTreeMap0.findByObject((Object) null);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test16()  throws Throwable  {
      LinkedTreeMap<Map.Entry<String, String>, LinkedTreeMap<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<String, String>, LinkedTreeMap<Integer, Object>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>(comparator0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedTreeMap1.computeIfAbsent("#8Ex4VwB/lF0h4yvk", unaryOperator0);
      linkedTreeMap1.findByObject(linkedTreeMap_EntrySet0);
      assertEquals(1, linkedTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test17()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedTreeMap0.findByEntry(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test18()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      linkedTreeMap0.findByEntry(abstractMap_SimpleEntry0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test19()  throws Throwable  {
      LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>>((Comparator<? super Comparable<Integer>>) null);
      linkedTreeMap0.find(0, false);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test20()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      linkedTreeMap0.find("com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator", true);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test21()  throws Throwable  {
      LinkedTreeMap<Map.Entry<Integer, Object>, Integer> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Integer, Object>, Integer>();
      Set<Map.Entry<Map.Entry<Integer, Object>, Integer>> set0 = (Set<Map.Entry<Map.Entry<Integer, Object>, Integer>>)linkedTreeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 100000)
  public void test22()  throws Throwable  {
      LinkedTreeMap<Comparable<String>, AbstractMap.SimpleImmutableEntry<String, String>> linkedTreeMap0 = new LinkedTreeMap<Comparable<String>, AbstractMap.SimpleImmutableEntry<String, String>>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "com.google.gson.internal.LinkedTreeMap$Node", linkedTreeMap_Node0, linkedTreeMap_Node0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(linkedTreeMap_Node1);
      linkedTreeMap0.putIfAbsent("[]", abstractMap_SimpleImmutableEntry0);
      linkedTreeMap0.entrySet();
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.gson.internal.LinkedTreeMap$KeySet$1").when(biFunction0).apply(anyString() , any());
      Comparable<String> comparable0 = linkedTreeMap0.compute(":I( gD^G|3<xYV(", biFunction0);
      LinkedTreeMap<Integer, Comparable<String>> linkedTreeMap1 = new LinkedTreeMap<Integer, Comparable<String>>();
      boolean boolean0 = linkedTreeMap1.containsKey(comparable0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<String, Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test25()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.comparator = null;
      linkedTreeMap0.put("Yz%Y]SIbNaO", (Comparable<String>) null);
      // Undeclared exception!
      try { 
        linkedTreeMap0.remove((Object) "Yz%Y]SIbNaO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test26()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%J0SIbNaO", "Yz%J0SIbNaO");
      linkedTreeMap0.comparator = null;
      // Undeclared exception!
      try { 
        linkedTreeMap0.put("y8:a?-$z1zn/V", (Comparable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<LinkedTreeMap<String, String>, String> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, String>, String>(comparator0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test28()  throws Throwable  {
      LinkedTreeMap<Object, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find(linkedTreeMap1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test30()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
  }

  @Test(timeout = 100000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y]SIbNaO", "Yz%Y]SIbNaO");
      linkedTreeMap0.put(";", "Yz%Y]SIbNaO");
      linkedTreeMap0.put("<+:oY", "Yz%Y]SIbNaO");
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test32()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedTreeMap0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer((-1449));
      linkedTreeMap0.put(integer0, (Integer) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test34()  throws Throwable  {
      LinkedTreeMap.Node<String, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<Object>>();
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.remove(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test35()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test36()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove((Object) null);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains("vJT");
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      linkedTreeMap_Node1.right = linkedTreeMap_Node0;
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      assertNotNull(linkedTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test39()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap_Node0.left = linkedTreeMap_Node0;
      // Undeclared exception!
      linkedTreeMap_Node0.left.first();
  }

  @Test(timeout = 100000)
  public void test40()  throws Throwable  {
      LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Map.Entry<String, String>> linkedTreeMap0 = new LinkedTreeMap<Object, Map.Entry<String, String>>(comparator0);
      LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.value = "";
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test41()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.value = (Object) linkedTreeMap_Node0;
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test42()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node1.value = (Object) linkedTreeMap_Node0;
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test43()  throws Throwable  {
      LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Map.Entry<String, String>> linkedTreeMap0 = new LinkedTreeMap<Object, Map.Entry<String, String>>(comparator0);
      LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<LinkedTreeMap<Object, Map.Entry<String, String>>, String>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test44()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      LinkedTreeMap.Node<String, Comparable<String>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      boolean boolean0 = linkedTreeMap_Node0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test45()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      Object object0 = new Object();
      boolean boolean0 = linkedTreeMap_Node0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test46()  throws Throwable  {
      LinkedTreeMap<AbstractMap.SimpleEntry<String, String>, Object> linkedTreeMap0 = new LinkedTreeMap<AbstractMap.SimpleEntry<String, String>, Object>();
      linkedTreeMap0.keySet();
      Set<AbstractMap.SimpleEntry<String, String>> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 100000)
  public void test47()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer1);
      linkedTreeMap0.forEach(biConsumer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test48()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("aM6}*gOjN^a68B i}Q", "aM6}*gOjN^a68B i}Q");
      linkedTreeMap0.put("Yz%Y]SIbaO", "Yz%Y]SIbaO");
      linkedTreeMap0.put("com.googe.gsn.inte&nal.LikedTreeMap$KeySet$1", (Comparable<String>) null);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test49()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.put("<", ";");
      linkedTreeMap0.put("Ko|\"", "Ko|\"");
      linkedTreeMap0.remove((Object) "Ko|\"");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test50()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y]SIbaO", "Yz%Y]SIbaO");
      linkedTreeMap0.put(";", "Yz%Y]SIbaO");
      linkedTreeMap0.put("", "Yz%Y]SIbaO");
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test51()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("com.google.gson.internal.LinkedTreeMap", "com.google.gson.internal.LinkedTreeMap");
      linkedTreeMap0.put("key == null", (Comparable<String>) null);
      linkedTreeMap0.put("w8", (Comparable<String>) null);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test52()  throws Throwable  {
      LinkedTreeMap<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap0 = new LinkedTreeMap<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      LinkedTreeMap.Node<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedTreeMap0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Map.Entry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(linkedTreeMap_Node0, abstractMap_SimpleImmutableEntry0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test53()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("?yENCFGwS9e/9", "?yENCFGwS9e/9");
      linkedTreeMap0.put("toW", "toW");
      linkedTreeMap0.remove((Object) "?yENCFGwS9e/9");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test54()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      linkedTreeMap0.put("", "Yz%Y0SIbNaO");
      linkedTreeMap0.remove((Object) "Yz%Y0SIbNaO");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test55()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y]SIbaO", "Yz%Y]SIbaO");
      linkedTreeMap0.put(";", "Yz%Y]SIbaO");
      linkedTreeMap0.put("<+:oY", "Yz%Y]SIbaO");
      linkedTreeMap0.remove((Object) "<+:oY");
      assertEquals(2, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test56()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("1z7Y0SIbNaO", "1z7Y0SIbNaO");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("1z7Y0SIbNaO", "@");
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test57()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("1z7Y0SIbNaO", "1z7Y0SIbNaO");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("1z7Y0SIbNaO", "1z7Y0SIbNaO");
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test58()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.put("w]8", (Comparable<String>) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("w]8", "");
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test59()  throws Throwable  {
      LinkedTreeMap.Node<String, Comparable<Object>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Comparable<Object>>();
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test60()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap<LinkedTreeMap<String, Object>, String> linkedTreeMap1 = new LinkedTreeMap<LinkedTreeMap<String, Object>, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap1.put(linkedTreeMap0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test61()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y]SIbaO", "Yz%Y]SIbaO");
      linkedTreeMap0.put("w8", "w8");
      linkedTreeMap0.put("dWhV\u0017);uA", "dWhV\u0017);uA");
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test62()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((String) null, (Comparable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test63()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.put(";", "Yz%Y]SIbaO");
      boolean boolean0 = linkedTreeMap0.containsKey(";");
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test64()  throws Throwable  {
      LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedTreeMap0 = new LinkedTreeMap<LinkedTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      int int0 = linkedTreeMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test65()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test66()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      linkedTreeMap0.putIfAbsent("Yz%Y0SIbNaO", "Yz%Y0SIbNaO");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      String string0 = linkedTreeMap_KeySet0.toString();
      assertEquals(1, linkedTreeMap0.size());
      assertEquals("[Yz%Y0SIbNaO]", string0);
  }

  @Test(timeout = 100000)
  public void test67()  throws Throwable  {
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      String string0 = linkedTreeMap_Node0.setValue(" k");
      assertNull(string0);
  }

  @Test(timeout = 100000)
  public void test68()  throws Throwable  {
      LinkedTreeMap.Node<Comparable<Object>, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Comparable<Object>, Object>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      LinkedTreeMap.Node<Comparable<Object>, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Comparable<Object>, Object>(linkedTreeMap_Node0, comparable0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      String string0 = linkedTreeMap_Node1.toString();
      assertEquals("=null", string0);
  }

  @Test(timeout = 100000)
  public void test69()  throws Throwable  {
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node0 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedTreeMap_Node0);
      LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>> linkedTreeMap_Node1 = new LinkedTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedTreeMap<String, Integer>>(linkedTreeMap_Node0, abstractMap_SimpleImmutableEntry0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      boolean boolean0 = linkedTreeMap_Node1.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test70()  throws Throwable  {
      LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>> linkedTreeMap0 = new LinkedTreeMap<Comparable<Integer>, AbstractMap.SimpleEntry<Integer, Object>>((Comparator<? super Comparable<Integer>>) null);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(object0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test72()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 100000)
  public void test73()  throws Throwable  {
      LinkedTreeMap<String, Comparable<String>> linkedTreeMap0 = new LinkedTreeMap<String, Comparable<String>>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }
}
