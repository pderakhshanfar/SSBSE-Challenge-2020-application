/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 15:41:31 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.ParameterizedTypeFixtures;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      Class<String> class0 = String.class;
      gson0.fromJson((JsonElement) jsonNull1, class0);
      gson0.toJsonTree((Object) null);
      Class<Float> class1 = Float.TYPE;
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<MockDate> class0 = MockDate.class;
      TypeToken<MockDate> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Float float0 = new Float(302.77826F);
      gson0.toJsonTree((Object) float0, (Type) class0);
      File file0 = MockFile.createTempFile("RUx", "l>9>J_D<j81/'#zMHp[");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Excluder excluder0 = Excluder.DEFAULT;
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, false, false);
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      TypeToken.getParameterized(class0, typeArray0);
      TypeAdapter<String> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      Gson.checkValidFloatingPoint((-1.0));
      Gson gson0 = new Gson();
      Boolean boolean0 = new Boolean("{serializeNulls:");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<Double> class0 = Double.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Short> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Short>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.google.gson.internal.LinkedTreeMap$EntrySet");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) null, (Appendable) mockFileWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  @Ignore
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Float float0 = new Float((-1.0F));
      JsonElement jsonElement0 = gson0.toJsonTree((Object) float0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.append((CharSequence) string0);
      charArrayWriter0.append((CharSequence) string0);
      charArrayWriter0.append('(');
      gson0.toJson(jsonElement0, (Appendable) charArrayWriter0);
      assertEquals(6825, charArrayWriter0.size());
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("{serializeNulls:");
      Class<Object> class0 = Object.class;
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 17 path $.serializeNulls
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      Class<Double> class1 = Double.TYPE;
      Boolean boolean0 = Boolean.TRUE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1Y");
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Type) class1, (Appendable) mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertTrue(gson0.htmlSafe());
      assertNotNull(fieldNamingStrategy0);
      
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) fieldNamingStrategy0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.FieldNamingPolicy$1 cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(227);
      gson0.toJson((Object) atomicLongArray0);
      gson0.htmlSafe();
      AtomicLongArray atomicLongArray1 = new AtomicLongArray(220);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = gson0.newJsonWriter(charArrayWriter0);
      gson0.toJson((Object) atomicLongArray1, type0, jsonWriter0);
      assertEquals(5721, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      Byte byte0 = new Byte((byte)0);
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) byte0, (Type) class0);
      Double double0 = new Double((byte)0);
      Gson gson1 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = gson1.newJsonWriter(charArrayWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.name("7io/jRQ");
      // Undeclared exception!
      try { 
        jsonWriter1.jsonValue("7io/jRQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-1.0));
      gson0.toJson((Object) double0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("java.lang.Double@0000000025");
      gson0.newBuilder();
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      PipedWriter pipedWriter0 = new PipedWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('?');
      charArrayWriter1.append('+');
      Class<Float> class0 = Float.TYPE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("z", true);
      gson0.toJson((Object) double0, (Type) class0, (Appendable) mockFileWriter0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class0);
      Type type0 = typeToken0.getType();
      gson0.fromJson("", type0);
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Short.compare((short) (-851), (short) (-851));
      gson0.fieldNamingStrategy();
      Gson.checkValidFloatingPoint(0);
      StringReader stringReader0 = new StringReader("");
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson((Reader) stringReader0, (Type) class0);
      Class<Float> class1 = Float.class;
      gson0.fromJson((Reader) stringReader0, class1);
      Gson.checkValidFloatingPoint(0);
      gson0.htmlSafe();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = "com.google.gson.Gson$1";
      Gson gson0 = new Gson();
      Class<AtomicLong> class1 = AtomicLong.class;
      try { 
        gson0.fromJson("9[h?R*gr/D.;4Q", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      Short.compare((short)3099, (short)0);
      gson0.fieldNamingStrategy();
      gson0.toJson((Object) null);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3099);
      gson0.toJson((Object) atomicLongArray0);
      gson0.htmlSafe();
      Character character0 = Character.valueOf('|');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = 1150;
      intArray0[2] = (-1947);
      intArray0[3] = 647;
      intArray0[4] = 1334;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      excluder1.disableInnerClassSerialization();
      Excluder excluder2 = new Excluder();
      Excluder excluder3 = excluder2.withExclusionStrategy((ExclusionStrategy) null, false, false);
      Excluder excluder4 = excluder3.withModifiers(intArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder4, typeToken0);
      try { 
        gson0.fromJson("YUGQ4}[j", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Object>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<Object>>();
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Integer>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter1.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray(1406);
      Class<Object> class0 = Object.class;
      gson0.fromJson((JsonElement) jsonArray0, class0);
      PipedReader pipedReader0 = new PipedReader(1406);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<String>();
      gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson((String) null, class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      double double0 = 0.0;
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      String string0 = null;
      Boolean boolean0 = Boolean.valueOf((String) null);
      Boolean.compare(true, true);
      Boolean.logicalAnd(true, false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson0.toJson((JsonElement) jsonPrimitive0);
      int int0 = 0;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Excluder excluder1 = new Excluder();
      Excluder excluder2 = excluder1.withExclusionStrategy((ExclusionStrategy) null, false, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      excluder2.withModifiers(intArray0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("[]", string0);
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) "com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      Object object0 = null;
      Class<Double> class0 = Double.TYPE;
      gson0.toJson((Object) null, (Type) class0);
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      assertTrue(gson0.htmlSafe());
      assertNotNull(excluder0);
      assertFalse(gson0.serializeNulls());
      
      excluder0.disableInnerClassSerialization();
      gson0.toJsonTree((Object) excluder0);
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      JsonWriter jsonWriter0 = null;
      try {
        jsonWriter0 = new JsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken.get(class0);
      gson0.toString();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3092);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) "}");
      gson0.excluder();
      gson0.toString();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      Class<? super Type> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(1511);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-4.0100293F));
      gson0.toJsonTree((Object) float0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(2176.0F);
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("rL|{hm+", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      Short short0 = new Short((short)568);
      gson0.toJsonTree((Object) short0, (Type) class0);
      gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken.get(class0);
      try { 
        gson0.fromJson("[W2<K8sMDV]B^u'", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"W2<K8sMDV\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AtomicLong> class0 = AtomicLong.class;
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      StringReader stringReader0 = new StringReader("8CUHu$@b9!s");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"8CUHu$@b9!s\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      PipedWriter pipedWriter0 = new PipedWriter();
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$3");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Type) null, jsonWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(227);
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      excluder1.withVersion(227);
      boolean boolean0 = Gson.DEFAULT_PRETTY_PRINT;
      Float float0 = new Float((double) 227);
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken.get(class0);
      Class<Double> class1 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      JsonArray jsonArray0 = new JsonArray(8232);
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray1, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("E", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Short> class1 = Short.TYPE;
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      gson0.getAdapter(class2);
      Class<String> class3 = String.class;
      gson0.fromJson("", class3);
      Gson.FutureTypeAdapter<AtomicLongArray> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLongArray>();
      Class<String> class4 = String.class;
      gson0.fromJson("com.google.gson.internal.ConstructorConstructor$12", class4);
      String string0 = gson0.toJson((Object) "com.google.gson.internal.ConstructorConstructor$12");
      assertEquals("\"com.google.gson.internal.ConstructorConstructor$12\"", string0);
      
      Integer integer0 = new Integer((-736));
      gson0.toJsonTree((Object) integer0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<AtomicLongArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<String>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.Gson$4");
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$4");
      gson0.toJsonTree((Object) stringReader0);
      Class<Object> class1 = Object.class;
      gson0.fromJson((Reader) stringReader0, class1);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson("|jXt");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<AtomicLongArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$30", e);
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0, (Type) class0);
      Short.compare((short)3099, (short)0);
      Class<Long> class1 = Long.class;
      gson0.fromJson(jsonElement0, class1);
      Long long0 = new Long(0L);
      gson0.toJsonTree((Object) long0);
      gson0.fieldNamingStrategy();
      Gson.checkValidFloatingPoint(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson.checkValidFloatingPoint(1.0);
      StringReader stringReader0 = new StringReader("");
      gson0.fromJson((Reader) stringReader0, (Type) class0);
      Class<Float> class2 = Float.class;
      gson0.fromJson((Reader) stringReader0, class2);
      Gson.checkValidFloatingPoint((-82.5539829330356));
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean1);
      gson0.fromJson(jsonElement0, (Type) class2);
      gson0.fromJson((Reader) stringReader0, (Type) class2);
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      Gson.checkValidFloatingPoint(1.0);
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("null", string0);
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      Boolean.valueOf((String) null);
      Boolean.compare(true, true);
      Boolean.logicalAnd(true, false);
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      StringReader stringReader0 = new StringReader("Qu");
      Class<Type> class1 = Type.class;
      Class<Type> class2 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      gson0.toJsonTree((Object) "types and labels must be unique");
      Type type0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(0.0);
      // Undeclared exception!
      try { 
        jsonWriter1.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      gson0.getAdapter(class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$35", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"com.google.gson.internal.bind.TypeAdapters$35\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = null;
      try {
        jsonArray0 = new JsonArray((-3415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3415
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(190);
      Gson gson0 = new Gson();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 190;
      longArray0[1] = (long) 190;
      longArray0[2] = (long) 190;
      longArray0[3] = (long) 190;
      longArray0[4] = (long) 190;
      longArray0[5] = (long) 190;
      longArray0[6] = (long) 190;
      longArray0[7] = (long) 190;
      AtomicLongArray atomicLongArray1 = new AtomicLongArray(longArray0);
      gson0.toJsonTree((Object) atomicLongArray1);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)849);
      Short.compare((short)3099, (short)0);
      gson0.fieldNamingStrategy();
      Double double0 = new Double((short)0);
      gson0.toJson((Object) null);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3099);
      gson0.toJson((Object) atomicLongArray0);
      gson0.htmlSafe();
      JsonArray jsonArray0 = new JsonArray(3429);
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Class<Byte> class0 = Byte.class;
      gson0.getAdapter(class0);
      Class<Double> class1 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      gson0.serializeNulls();
      Class<BigDecimal> class2 = BigDecimal.class;
      gson0.getAdapter(class2);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class2, (Type) class2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.math.BigDecimal
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$17", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.disableInnerClassSerialization();
      Excluder excluder1 = Excluder.DEFAULT;
      excluder1.withExclusionStrategy((ExclusionStrategy) null, false, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson.checkValidFloatingPoint(0.0);
      StringReader stringReader0 = new StringReader("Op!kIZ");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      PipedWriter pipedWriter0 = new PipedWriter();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Type) null, jsonWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("", class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertTrue(gson0.htmlSafe());
      assertFalse(boolean0);
      
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      try { 
        jsonWriter0.value((Number) atomicLong0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<BigDecimal>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      assertNotSame(gson_FutureTypeAdapter0, gson_FutureTypeAdapter1);
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      String string0 = gson0.toString();
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson("|jXt");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint((-4827.05316));
      int int0 = (-2385);
      MockDate mockDate0 = new MockDate(2, 2, (-2385));
      gson0.toJson((Object) mockDate0);
      Class<Byte> class0 = Byte.class;
      gson0.getAdapter(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) mockDate0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.remove("com.google.gson.Gson$FutureTypeAdapter");
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      short short0 = (short)1204;
      Short short1 = new Short((short)1204);
      Class<Long> class0 = Long.TYPE;
      gson0.toJson((Object) short1, (Type) class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      try { 
        pipedReader0.mark((short)1204);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0, (Type) class0);
      Short.compare((short)3099, (short)0);
      Class<Long> class1 = Long.class;
      gson0.fromJson(jsonElement0, class1);
      Long long0 = new Long(0L);
      gson0.toJsonTree((Object) long0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Long. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Character character0 = new Character('g');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Character.lowSurrogate(2628);
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      jsonPrimitive1.equals(excluder1);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      Class<? super Short> class1 = typeToken0.getRawType();
      gson0.toJsonTree((Object) null, (Type) class1);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!4;T0NkSVdEF>hqw-");
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, true, false);
      Excluder excluder2 = excluder1.withVersion((-1987.5893937397));
      int[] intArray0 = new int[7];
      intArray0[0] = (-10);
      intArray0[1] = 1;
      intArray0[2] = 17;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 30;
      intArray0[6] = 0;
      Excluder excluder3 = excluder2.withModifiers(intArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder3, typeToken0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 87);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<AtomicLongArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      Gson.checkValidFloatingPoint((-954.4805940779335));
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        jsonArray0.getAsJsonObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: []
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken.get(class0);
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Gson gson1 = new Gson();
      gson0.fromJson((String) null, (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(bigDecimal0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('~');
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value(3776.9);
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter1);
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<String>();
      gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
      assertNotSame(gson_FutureTypeAdapter1, gson_FutureTypeAdapter0);
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$9");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      Class<Byte> class0 = Byte.TYPE;
      gson0.toJsonTree((Object) short0, (Type) class0);
      Short.compare((short)3099, (short)0);
      gson0.fieldNamingStrategy();
      Double double0 = new Double((short)0);
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3099);
      gson0.toJson((Object) atomicLongArray0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      Excluder excluder2 = excluder1.withVersion((-1.0));
      Excluder excluder3 = excluder2.withExclusionStrategy((ExclusionStrategy) null, false, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 30;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      excluder3.withModifiers(intArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(190);
      Gson gson0 = new Gson();
      gson0.toJson((Object) atomicLongArray0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray();
      Class<Character> class0 = Character.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7^(ViRzB{7uVgSL");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "7^(ViRzB{7uVgSL";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "7^(ViRzB{7uVgSL";
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("7^(ViRzB{7uVgSL", objectArray0);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(printWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      gson0.toJson((JsonElement) null, jsonWriter1);
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson0.toJson((Object) gson1);
      assertTrue(gson1.htmlSafe());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson("", (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<Boolean> class0 = Boolean.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('[');
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigInteger0, (Type) class0, (Appendable) charArrayWriter1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLongArray>>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      TypeToken<Byte> typeToken0 = TypeToken.get(class0);
      Class<? super Byte> class1 = typeToken0.getRawType();
      File file0 = MockFile.createTempFile("AssertionError (GSON 2.8.7-SNAPSHOT): ", "", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class1, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("Ze(gq", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-3124.871));
      gson0.toJson((Object) double0);
      int int0 = (-2390);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      gson0.getAdapter(class0);
      String string0 = null;
      Class<String> class1 = String.class;
      gson0.fromJson((String) null, class1);
      Gson.FutureTypeAdapter<AtomicLongArray> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLongArray>();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      Gson.FutureTypeAdapter<DefaultDateTypeAdapter> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<DefaultDateTypeAdapter>();
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Long>();
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      Class<Byte> class1 = Byte.class;
      gson0.getAdapter(class1);
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      TypeToken.get((Type) class0);
      Boolean boolean0 = Boolean.TRUE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson0.toJson((JsonElement) jsonPrimitive0);
      int int0 = 0;
      int int1 = 40;
      PipedReader pipedReader0 = new PipedReader(40);
      Class<BigInteger> class2 = BigInteger.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getAdapter(typeToken0);
      gson0.toJsonTree((Object) typeAdapter0);
      Byte byte0 = new Byte((byte)46);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJsonTree((Object) atomicLong0);
      Class<Short> class1 = Short.TYPE;
      String string0 = "9\"ufxkYah";
      try { 
        gson0.fromJson("9\"ufxkYah", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"9\"ufxkYah\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<Boolean> class0 = Boolean.TYPE;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      gson0.toJson((Object) "", (Appendable) stringWriter1);
      assertEquals("{\"\"", stringWriter1.toString());
      
      Class<Short> class1 = Short.TYPE;
      gson0.fieldNamingStrategy();
      Class<String> class2 = String.class;
      gson0.fromJson("", class2);
      Gson.FutureTypeAdapter<AtomicLongArray> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLongArray>();
      Class<String> class3 = String.class;
      gson0.fromJson("com.google.gson.internal.ConstuorConstructor$12", class3);
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      gson0.toJson((Object) double0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-3124.871));
      gson0.toJson((Object) double0);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Short> class1 = Short.TYPE;
      gson0.fieldNamingStrategy();
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      gson0.getAdapter(class2);
      Class<String> class3 = String.class;
      try { 
        gson0.fromJson("$qSk:u*z?GPCqCD{S", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Class<Date> class0 = Date.class;
      try { 
        gson0.fromJson((JsonElement) jsonObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Float float0 = new Float((-1.0F));
      gson0.toJsonTree((Object) float0);
      Class<Short> class0 = Short.TYPE;
      gson0.fieldNamingStrategy();
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      gson0.getAdapter(class1);
      Class<String> class2 = String.class;
      try { 
        gson0.fromJson(string0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test116()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)0);
      Class<Byte> class0 = Byte.TYPE;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0, (Type) class0);
      Short.compare((short)3099, (short)0);
      Class<Long> class1 = Long.class;
      gson0.fromJson(jsonElement0, class1);
      Long long0 = new Long(0L);
      gson0.toJsonTree((Object) long0);
      gson0.fieldNamingStrategy();
      Gson.checkValidFloatingPoint(0L);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Double> class0 = Double.class;
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Short> class1 = Short.TYPE;
      gson0.fieldNamingStrategy();
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      gson0.getAdapter(class2);
      Class<String> class3 = String.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("MMM d, yyyy", (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test119()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      String string0 = "com.google.gson.Gson$1";
      StringReader stringReader0 = new StringReader("com.google.gson.Gson$1");
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test120()  throws Throwable  {
      Gson.checkValidFloatingPoint((-1.0));
      Gson.checkValidFloatingPoint(348.2446121533);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<? super Object> class1 = typeToken0.getRawType();
      gson0.fromJson((JsonElement) null, (Type) class1);
      Class<Short> class2 = Short.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class1, (Type) class2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 100000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("2", class0);
      assertFalse(gson0.serializeNulls());
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)51);
      Class<Byte> class0 = Byte.TYPE;
      gson0.toJsonTree((Object) short0, (Type) class0);
      Short.compare((short)3099, (short)0);
      Long long0 = new Long(15L);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      gson0.fieldNamingStrategy();
      Gson.checkValidFloatingPoint(15L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Gson.checkValidFloatingPoint(1.0);
      StringReader stringReader0 = new StringReader("");
      gson0.fromJson((Reader) stringReader0, (Type) class0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) jsonElement0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.JsonNull cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Float float0 = new Float(0.0F);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.flip();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("-(_db?", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      Double double0 = new Double((-3124.871));
      gson0.toJson((Object) double0);
      int int0 = (-2390);
      JsonArray jsonArray0 = null;
      try {
        jsonArray0 = new JsonArray((-2390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2390
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 100000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Float float0 = new Float((-1.0F));
      gson0.toJsonTree((Object) float0);
      Class<Short> class0 = Short.TYPE;
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test127()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Double> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      Class<Long> class1 = Long.class;
      TypeToken<Long> typeToken1 = TypeToken.get(class1);
      Class<? super Long> class2 = typeToken1.getRawType();
      gson0.fromJson(jsonReader0, (Type) class2);
      assertFalse(jsonReader0.isLenient());
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Double double0 = new Double((-3124.871));
      gson0.toJson((Object) double0);
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
      Gson.FutureTypeAdapter<InstanceCreator<String>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<InstanceCreator<String>>();
      Gson.FutureTypeAdapter<InstanceCreator<String>> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<InstanceCreator<String>>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      StringReader stringReader0 = new StringReader("java.lang.Long@0000000030");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test129()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Class<String> class1 = String.class;
      TypeToken<String> typeToken1 = TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken1);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      TypeToken<ChronoLocalDate> typeToken2 = TypeToken.get(class2);
      Class<? super ChronoLocalDate> class3 = typeToken2.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson("x:qam]8WRbXAbxc", (Type) class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test130()  throws Throwable  {
      Gson.FutureTypeAdapter<DefaultDateTypeAdapter> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<DefaultDateTypeAdapter>();
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Long>();
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.class;
      Class<Byte> class1 = Byte.class;
      gson0.getAdapter(class1);
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      TypeToken.get((Type) class0);
      gson0.getAdapter(typeToken0);
      StringReader stringReader0 = new StringReader("");
      Class<Type> class2 = Type.class;
      gson0.fromJson((Reader) stringReader0, class2);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "", (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 100000)
  public void test131()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      Class<Excluder> class0 = Excluder.class;
      TypeAdapter<Excluder> typeAdapter0 = gson0.getAdapter(class0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Gson.DEFAULT_SERIALIZE_NULLS;
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder1 = excluder0.withExclusionStrategy(mockExclusionStrategy0, true, false);
      Excluder excluder2 = excluder1.withVersion((-1987.5893937397));
      int[] intArray0 = new int[7];
      intArray0[0] = (-10);
      intArray0[1] = 1;
      intArray0[2] = 17;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 30;
      intArray0[6] = 0;
      Excluder excluder3 = excluder2.withModifiers(intArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder3, typeToken0);
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson0.getAdapter(typeToken1);
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      PipedWriter pipedWriter0 = new PipedWriter();
      Integer integer0 = Integer.getInteger("}", 0);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }
}
