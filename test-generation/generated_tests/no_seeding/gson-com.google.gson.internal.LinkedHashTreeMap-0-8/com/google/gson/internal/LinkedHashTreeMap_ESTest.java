/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 15:47:42 GMT 2020
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedHashTreeMap;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedHashTreeMap_ESTest extends LinkedHashTreeMap_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-901)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node2.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node5, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node6.setValue(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains("");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove("");
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Integer integer1 = new Integer((-561));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, linkedHashTreeMap_Node5);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node7, abstractMap_SimpleEntry1, (-561), linkedHashTreeMap_Node7, linkedHashTreeMap_Node7);
      linkedHashTreeMap3.remove((Object) linkedHashTreeMap_Node8);
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.size();
      LinkedHashTreeMap.AvlBuilder<Integer, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node1, integer0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("hY8\"WPw?\"+Ef&wO-?QE", linkedHashTreeMap_Node1);
      linkedHashTreeMap_Node5.setValue(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node6.last();
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Object, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node7.first();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node8);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(comparator1);
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.Node<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, LinkedHashTreeMap<Object, Integer>>();
      AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>((AbstractMap.SimpleEntry<Integer, Object>) null, (Object) null);
      LinkedHashTreeMap.Node<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, LinkedHashTreeMap<Object, Integer>>(linkedHashTreeMap_Node9, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node9, linkedHashTreeMap_Node9);
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap_Node10.setValue(linkedHashTreeMap2);
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove((Object) null);
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong(3271);
      Integer integer0 = new Integer((-1144));
      linkedHashTreeMap0.putIfAbsent(integer0, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      Integer integer1 = new Integer((-1794));
      Integer.sum(23, (-1471));
      Integer integer2 = new Integer((-1471));
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap1.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap3.putAll(linkedHashTreeMap0);
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      linkedHashTreeMap2.get(linkedHashTreeMap1);
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      assertNotNull(linkedHashTreeMap_Node2);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 1868, linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node6, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      Object object0 = linkedHashTreeMap_Node7.setValue(linkedHashTreeMap_Node5);
      assertNull(object0);
      
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      assertEquals(0, linkedHashTreeMap1.size());
      
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node8.last();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>(linkedHashTreeMap_Node9, linkedHashTreeMap3, (-2674), linkedHashTreeMap_Node8, linkedHashTreeMap_Node9);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node10);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap3.new EntrySet();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>((Comparator<? super Object>) null);
      boolean boolean0 = linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap4);
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1152));
      Integer integer1 = new Integer(14);
      Integer integer2 = new Integer(640);
      Integer.toUnsignedLong(139);
      Integer integer3 = new Integer(1757);
      Integer.getInteger("", integer2);
      Integer integer4 = new Integer((-2));
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      linkedHashTreeMap0.size = 4327;
      linkedHashTreeMap0.find(integer4, true);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, (-1), linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer((-1));
      linkedHashTreeMap0.putIfAbsent(integer2, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap_Node5.first();
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node2.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node4.setValue(linkedHashTreeMap_Node3);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains("");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove("");
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Integer integer1 = new Integer((-561));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, linkedHashTreeMap_Node4);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node5, abstractMap_SimpleEntry1, (-561), linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      linkedHashTreeMap3.remove((Object) linkedHashTreeMap_Node6);
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 1868, linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.getValue();
      linkedHashTreeMap_Node3.prev = linkedHashTreeMap_Node2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node6, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node7.setValue(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node8.last();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>(linkedHashTreeMap_Node9, linkedHashTreeMap3, (-2674), linkedHashTreeMap_Node8, linkedHashTreeMap_Node9);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node10);
      LinkedHashTreeMap<Object, LinkedHashTreeMap<Integer, String>> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, LinkedHashTreeMap<Integer, String>>((Comparator<? super Object>) null);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap4.find(linkedHashTreeMap5, false);
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, false);
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Object>();
      LinkedHashTreeMap.Node<Integer, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node2.toString();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>(comparator1);
      Integer integer0 = new Integer(1);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      Integer integer1 = new Integer(7);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap1.merge(integer0, integer1, biFunction0);
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap2.new KeySet();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", integer1);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap3.put(abstractMap_SimpleImmutableEntry0, linkedHashTreeMap4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      linkedHashTreeMap0.entrySet();
      linkedHashTreeMap0.findByObject("a1@2D\"uI>4_Z$ M(");
      String string0 = "7Igxgk4qN 1G";
      linkedHashTreeMap0.put("7Igxgk4qN 1G", "7Igxgk4qN 1G");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object>(comparator0);
      linkedHashTreeMap1.clear();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 1);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(6);
      Integer.toUnsignedLong(6);
      Integer integer1 = new Integer(5);
      Integer.getInteger("", integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, String>(comparator0);
      linkedHashTreeMap2.find(integer1, true);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Integer>(comparator1);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap4 = new LinkedHashTreeMap<String, Integer>();
      Integer integer2 = new Integer(6);
      linkedHashTreeMap4.removeInternalByKey(integer2);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(comparator2);
      linkedHashTreeMap5.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap6 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap3.new KeySet();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap2.new KeySet();
      linkedHashTreeMap_KeySet1.clear();
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.computeIfPresent("", biFunction0);
      linkedHashTreeMap0.containsKey(">z{8hVtG\n");
      LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = null;
      try {
        linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Object, String>>((LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Object, String>>) null, "", 2038, (LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Object, String>>) null, (LinkedHashTreeMap.Node<Object, LinkedHashTreeMap<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 3);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node2, "", 8, linkedHashTreeMap_NodeArray0[0], linkedHashTreeMap_NodeArray0[0]);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong(3271);
      Integer integer0 = new Integer((-1144));
      linkedHashTreeMap0.putIfAbsent(integer0, "com.google.gson.internal.LinkedHashTreMap$AvlBuilder");
      Integer integer1 = new Integer((-1794));
      Integer.sum(23, (-1471));
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 9);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node1;
      Integer integer2 = new Integer((-3607));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node1, integer2, 4327, linkedHashTreeMap_Node2, linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_NodeArray0[3], integer0, 3169, linkedHashTreeMap_Node4, linkedHashTreeMap_NodeArray0[0]);
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_NodeArray0[7] = linkedHashTreeMap_Node9;
      Integer integer3 = new Integer((-1409));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_NodeArray0[6], integer3, (-1794), linkedHashTreeMap_NodeArray0[3], linkedHashTreeMap_Node1);
      linkedHashTreeMap_NodeArray0[8] = linkedHashTreeMap_Node10;
      linkedHashTreeMap2.table = linkedHashTreeMap_NodeArray0;
      // Undeclared exception!
      try { 
        linkedHashTreeMap2.remove((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedHashTreeMap_Node0);
      linkedHashTreeMap0.replace(linkedHashTreeMap1, abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.AvlBuilder<String, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, Integer>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("l<yNj4'%&<_", "l<yNj4'%&<_");
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>(linkedHashTreeMap_Node1, abstractMap_SimpleEntry0, (-322), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<String, String>, String>(linkedHashTreeMap_Node3, abstractMap_SimpleEntry0, (-322), linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<String, String>, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<String, String>, String>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, LinkedHashTreeMap<Object, Integer>> linkedHashTreeMap0 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, LinkedHashTreeMap<Object, Integer>>();
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap<Integer, Map.Entry<String, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, Map.Entry<String, Object>>(comparator0);
      linkedHashTreeMap3.remove((Object) linkedHashTreeMap1);
      Integer integer0 = new Integer((-1557));
      linkedHashTreeMap0.removeInternalByKey(integer0);
      LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<Object, Integer>();
      Integer integer1 = linkedHashTreeMap_Node6.value;
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node7.last();
      Integer integer2 = new Integer((-1557));
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node8, integer2, 2280, linkedHashTreeMap_Node7, linkedHashTreeMap_Node8);
      Integer integer3 = linkedHashTreeMap_Node9.value;
      linkedHashTreeMap4.get((Object) null);
      LinkedHashTreeMap.AvlIterator<Integer, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<Integer, String>();
      linkedHashTreeMap_AvlIterator1.reset(linkedHashTreeMap_Node10);
      linkedHashTreeMap_AvlIterator1.next();
      Object object0 = new Object();
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, false);
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>(linkedHashTreeMap_Node1, integer0, 0, linkedHashTreeMap_Node1, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_Node3.equals(linkedHashTreeMap_Node2);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node4, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node5.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node6.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node7.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node9, "", (-2268), linkedHashTreeMap_Node6, linkedHashTreeMap_Node9);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node10;
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node9;
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node9;
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node9;
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node9;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node11 = linkedHashTreeMap_Node7.first();
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node11;
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap<Object, LinkedHashTreeMap<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, LinkedHashTreeMap<String, Object>>((Comparator<? super Object>) null);
      linkedHashTreeMap1.size();
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, LinkedHashTreeMap<Object, String>>(comparator0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.forEach(biConsumer0);
      linkedHashTreeMap0.findByObject("");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains("");
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>();
      Integer integer0 = new Integer(3);
      linkedHashTreeMap1.replace("{MkR}Z", integer0, (Integer) null);
      Integer integer1 = Integer.valueOf((-1735));
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.put((String) null, integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      LinkedHashTreeMap<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<LinkedHashTreeMap<String, Object>, LinkedHashTreeMap<Object, Object>>(comparator0);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 7);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap<String, String> linkedHashTreeMap2 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>(linkedHashTreeMap_Node1, linkedHashTreeMap2, 91, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>(linkedHashTreeMap_Node2, linkedHashTreeMap2, 91, linkedHashTreeMap_Node1, linkedHashTreeMap_Node3);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node5;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node6;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node7;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node8;
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node1.first();
      linkedHashTreeMap_NodeArray0[6] = linkedHashTreeMap_Node9;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      linkedHashTreeMap1.clear();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap0);
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      linkedHashTreeMap_AvlIterator0.next();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap2.new EntrySet();
      linkedHashTreeMap_EntrySet1.remove(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.AvlBuilder<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      long long0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer(2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, 2, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer((-1));
      linkedHashTreeMap0.putIfAbsent(integer2, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap_Node5.first();
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.putIfAbsent("R", "R");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains((Object) null);
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong(0);
      Integer integer0 = new Integer(0);
      Integer.sum(0, (-1));
      Integer integer1 = new Integer((-186));
      Integer.getInteger("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", integer1);
      Integer integer2 = new Integer((-1));
      linkedHashTreeMap0.find(integer2, true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>(comparator0);
      linkedHashTreeMap1.removeInternalByKey(linkedHashTreeMap0);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap2.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap4.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node1, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      linkedHashTreeMap_EntrySet1.contains(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(4571);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer1, 12, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals((-1), linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>(comparator0);
      assertEquals(0, linkedHashTreeMap1.size());
      
      linkedHashTreeMap1.size();
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.reset(264);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject(linkedHashTreeMap_AvlBuilder0);
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      linkedHashTreeMap_Node0.height = 8;
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 8, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node3, (AbstractMap.SimpleEntry<Integer, Object>) null, 8, linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.left = linkedHashTreeMap_Node4;
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.first();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node6);
      LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node7.parent;
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.removeInternal((LinkedHashTreeMap.Node<LinkedHashTreeMap<Integer, String>, AbstractMap.SimpleEntry<Object, Object>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      LinkedHashTreeMap<Comparable<Object>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.findByObject(linkedHashTreeMap1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>(comparator1);
      Integer integer0 = new Integer(10);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, linkedHashTreeMap0);
      AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(abstractMap_SimpleEntry0, "");
      BiFunction<Object, Object, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> biFunction0 = (BiFunction<Object, Object, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap2.merge(integer0, abstractMap_SimpleImmutableEntry0, biFunction0);
      linkedHashTreeMap2.clear();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Comparable<String>, Integer> linkedHashTreeMap3 = new LinkedHashTreeMap<Comparable<String>, Integer>(comparator2);
      linkedHashTreeMap3.remove((Object) integer0);
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<String, Integer>, Map.Entry<Integer, String>> linkedHashTreeMap4 = new LinkedHashTreeMap<LinkedHashTreeMap<String, Integer>, Map.Entry<Integer, String>>(comparator3);
      linkedHashTreeMap4.keySet();
      LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap5 = new LinkedHashTreeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      linkedHashTreeMap5.findByObject(integer0);
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Map.Entry<Object, String>, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Map.Entry<Object, String>, Object>(comparator0);
      Set<Map.Entry<Map.Entry<Object, String>, Object>> set0 = (Set<Map.Entry<Map.Entry<Object, String>, Object>>)linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap1.clear();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.contains(set0);
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>((Comparator<? super Integer>) null);
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(4470);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer0, 4470, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node2, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.findByEntry((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(12);
      Integer integer1 = Integer.valueOf(12);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer1, 12, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap1.put(linkedHashTreeMap_Node0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer((-11));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>(comparator0);
      linkedHashTreeMap1.find(integer0, true);
      assertEquals(1, linkedHashTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject(linkedHashTreeMap_AvlBuilder0);
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      linkedHashTreeMap0.values();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node2.last();
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(20);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap0.size();
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      assertEquals(0, linkedHashTreeMap0.size());
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.computeIfPresent((Object) null, biFunction0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap2.comparator = comparator1;
      linkedHashTreeMap2.findByObject((Object) null);
      // Undeclared exception!
      try { 
        linkedHashTreeMap2.removeInternal((LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap1.find(linkedHashTreeMap0, false);
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap2.size();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<String, Comparable<String>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<String, Comparable<String>>();
      linkedHashTreeMap_AvlIterator0.next();
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Integer>, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      linkedHashTreeMap_Node0.setValue((Integer) null);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.setValue(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator1);
      linkedHashTreeMap1.find(linkedHashTreeMap0, true);
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      Comparator<Map.Entry<Integer, Object>> comparator1 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap0, linkedHashTreeMap_Node0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(comparator1, (Object) null);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(abstractMap_SimpleImmutableEntry0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node3.equals(abstractMap_SimpleImmutableEntry0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>(comparator2);
      linkedHashTreeMap_Node2.setValue(linkedHashTreeMap2);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      linkedHashTreeMap_Node5.last();
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal((LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-13)).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains(integer0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap0);
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap0.clear();
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(4571);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer1, 12, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      linkedHashTreeMap_EntrySet0.contains(linkedHashTreeMap_Node1);
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator0);
      linkedHashTreeMap0.size();
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, String>, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, String>, Object>();
      linkedHashTreeMap_Node0.last();
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator0);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator1);
      linkedHashTreeMap1.remove((Object) "f`");
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>>(linkedHashTreeMap_Node1, linkedHashTreeMap0, 1195, linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_Node4.equals(linkedHashTreeMap_Node0);
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(6);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer0, 6, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      linkedHashTreeMap_KeySet0.size();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet1.iterator();
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.reset(2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer>(comparator0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleImmutableEntry<Integer, String>, Integer>(linkedHashTreeMap_Node0, abstractMap_SimpleImmutableEntry0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap1);
      Integer.compareUnsigned(2261, (-577));
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong((-1));
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer(2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, 2, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer(1146);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1144));
      Integer.sum(778, 7);
      Integer integer5 = new Integer(778);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap1.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>();
      // Undeclared exception!
      linkedHashTreeMap4.putAll(linkedHashTreeMap0);
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node0, "", 2, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_Node4.setValue(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap2.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node6.first();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node7);
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      linkedHashTreeMap4.findByEntry(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Integer>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap5 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Integer>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>((Comparator<? super AbstractMap.SimpleEntry<Integer, Integer>>) null);
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>(comparator0);
      Integer.toUnsignedLong((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(349);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node1, integer1, (-1346), linkedHashTreeMap_Node1, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      Integer integer2 = new Integer(1219);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node3, integer0, (-1), linkedHashTreeMap_Node2, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node1.last();
      Integer integer3 = new Integer(1219);
      Integer integer4 = new Integer(844);
      Integer integer5 = new Integer((-1));
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap3.isEmpty();
      // Undeclared exception!
      linkedHashTreeMap2.putAll(linkedHashTreeMap0);
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, LinkedHashTreeMap<Object, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(481).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node2.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node5, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node6.setValue(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains("");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove("");
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Integer integer1 = new Integer((-561));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, linkedHashTreeMap_Node5);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node7, abstractMap_SimpleEntry1, (-561), linkedHashTreeMap_Node7, linkedHashTreeMap_Node7);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = linkedHashTreeMap3.remove((Object) linkedHashTreeMap_Node8);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap_Node0.left = linkedHashTreeMap_Node1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      linkedHashTreeMap_Node0.height = 8;
      Integer integer0 = new Integer((-1144));
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.merge(integer0, "KDn~21Cb$~", biFunction0);
      linkedHashTreeMap0.putIfAbsent(integer0, "~ cy*i5O,l_,Lb");
      Integer integer1 = new Integer(8);
      Integer.sum(8, 8);
      Integer integer2 = new Integer(8);
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap4 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap4.containsValue("KDn~21Cb$~");
      linkedHashTreeMap2.putAll(linkedHashTreeMap4);
      LinkedHashTreeMap.AvlBuilder<Integer, Comparable<Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<Integer, Comparable<Object>>();
      LinkedHashTreeMap.Node<Integer, Comparable<Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Comparable<Object>>();
      LinkedHashTreeMap.Node<Integer, Comparable<Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<Integer, Comparable<Object>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.AvlIterator<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node4);
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong((-1));
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer(2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, 2, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_Node3.value = "G;O)<H@IlFV<5EdNug";
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer(1146);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1144));
      Integer.toUnsignedLong(14);
      Integer integer5 = new Integer(0);
      Integer.getInteger("", integer5);
      Integer integer6 = new Integer(778);
      linkedHashTreeMap0.find(integer6, true);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong(0);
      Integer integer0 = new Integer(0);
      Integer.sum(0, (-1));
      Integer integer1 = new Integer((-186));
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>((Comparator<? super String>) null);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>>(linkedHashTreeMap_Node0, linkedHashTreeMap1, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      linkedHashTreeMap_Node2.first();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      linkedHashTreeMap_Node5.first();
      Integer integer2 = new Integer((-1205));
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      linkedHashTreeMap_AvlIterator1.next();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet0.remove((Object) null);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap1.new KeySet();
      LinkedHashTreeMap<String, LinkedHashTreeMap<Integer, Integer>> linkedHashTreeMap2 = new LinkedHashTreeMap<String, LinkedHashTreeMap<Integer, Integer>>((Comparator<? super String>) null);
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap1.entrySet();
      LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap4 = new LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap5 = new LinkedHashTreeMap<Integer, Object>();
      linkedHashTreeMap5.clear();
      assertEquals(0, linkedHashTreeMap5.size());
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      Map.Entry.comparingByValue();
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node6);
      linkedHashTreeMap_Node5.setValue(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node7.last();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>(linkedHashTreeMap_Node8, linkedHashTreeMap3, 0, linkedHashTreeMap_Node7, linkedHashTreeMap_Node8);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node9);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node11 = linkedHashTreeMap_Node10.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node12 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node11, "9I^FDJ/Jz", (-561), linkedHashTreeMap_Node11, linkedHashTreeMap_Node11);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node13 = linkedHashTreeMap_Node12.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node13;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node14 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node14;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node15 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_NodeArray0[0], "9I^FDJ/Jz", 0, linkedHashTreeMap_Node11, linkedHashTreeMap_Node14);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node15;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node16 = linkedHashTreeMap_Node13.first();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node16;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node17 = linkedHashTreeMap_Node13.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node18 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node17, "9I^FDJ/Jz", 3, linkedHashTreeMap_Node13, linkedHashTreeMap_Node16);
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node18;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node19 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node17, "9I^FDJ/Jz", (-4961), linkedHashTreeMap_Node15, linkedHashTreeMap_Node14);
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node19;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(12, linkedHashTreeMap_NodeArray1.length);
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>(linkedHashTreeMap_Node0, "", 757, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1.right);
      linkedHashTreeMap_Node1.height = 5139;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject((Object) null);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Integer>();
      linkedHashTreeMap1.keySet();
      linkedHashTreeMap1.findByObject(linkedHashTreeMap_AvlBuilder0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Comparable<Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Comparable<Object>>(comparator0);
      linkedHashTreeMap2.findByObject("");
      LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap3.removeInternal(linkedHashTreeMap_Node2, false);
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Integer>, Object> linkedHashTreeMap4 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Integer, Integer>, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      linkedHashTreeMap4.findByEntry(linkedHashTreeMap_Node5);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap3.new KeySet();
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      linkedHashTreeMap_AvlIterator0.next();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap5 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(comparator1);
      linkedHashTreeMap5.keySet();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap6 = new LinkedHashTreeMap<Object, Integer>(comparator2);
      assertEquals(0, linkedHashTreeMap6.size());
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<LinkedHashTreeMap<Object, Object>, Integer>(comparator0);
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator1);
      linkedHashTreeMap1.remove((Object) "");
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>(linkedHashTreeMap_Node0, (Object) null, (-711), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.getKey();
      linkedHashTreeMap0.remove((Object) null);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator0);
      linkedHashTreeMap0.values();
      linkedHashTreeMap0.clear();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, Integer>();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, Integer>();
      linkedHashTreeMap_Node0.right = linkedHashTreeMap_Node1;
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<String, Integer> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      assertSame(linkedHashTreeMap_Node3, linkedHashTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      String string0 = linkedHashTreeMap_Node1.toString();
      assertEquals("null=null", string0);
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.contains(linkedHashTreeMap0);
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap1.find(linkedHashTreeMap0, false);
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertEquals(0, linkedHashTreeMap2.size());
      
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node1, "", (-4430), linkedHashTreeMap_Node0, linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node5 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node3, "", (-4430), linkedHashTreeMap_Node4, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node7 = linkedHashTreeMap_Node1.last();
      assertNotSame(linkedHashTreeMap_Node1, linkedHashTreeMap_Node6);
      
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node5, "", 711, linkedHashTreeMap_Node1, linkedHashTreeMap_Node7);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node6, (String) null, (-4430), linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(0, linkedHashTreeMap_NodeArray1.length);
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>(linkedHashTreeMap_Node0, "", 757, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_AvlBuilder0.reset(757);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1.right);
      linkedHashTreeMap_Node1.height = 757;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.first();
      assertNotNull(linkedHashTreeMap_Node3);
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node2.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node5, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node6.setValue(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      assertEquals(0, linkedHashTreeMap1.size());
      
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 16);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node8 = linkedHashTreeMap_Node7.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node9 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node8, "9I^FDJ/Jz", (-561), linkedHashTreeMap_Node8, linkedHashTreeMap_Node8);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node10 = linkedHashTreeMap_Node9.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node10;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node11 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node11;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node12 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_NodeArray0[0], "9I^FDJ/Jz", 0, linkedHashTreeMap_Node8, linkedHashTreeMap_Node11);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node12;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node13 = linkedHashTreeMap_Node10.first();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node13;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node14 = linkedHashTreeMap_Node10.last();
      assertNotSame(linkedHashTreeMap_Node8, linkedHashTreeMap_Node13);
      
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node15 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node14, "9I^FDJ/Jz", 3, linkedHashTreeMap_Node10, linkedHashTreeMap_Node13);
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node15;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node16 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node14, "9I^FDJ/Jz", (-4961), linkedHashTreeMap_Node12, linkedHashTreeMap_Node11);
      assertTrue(linkedHashTreeMap_Node16.equals((Object)linkedHashTreeMap_Node15));
      
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node16;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(32, linkedHashTreeMap_NodeArray1.length);
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>(linkedHashTreeMap_Node0, "", 757, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_Node1.right = linkedHashTreeMap_Node0;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1.right);
      linkedHashTreeMap_Node1.height = 757;
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Integer>();
      Integer integer0 = new Integer(757);
      linkedHashTreeMap1.put(integer0, integer0);
      linkedHashTreeMap1.keySet();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap_Node3.last();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap_Node3.right = linkedHashTreeMap_Node4;
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node3, true);
      assertEquals((-1), linkedHashTreeMap2.size());
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      BiFunction<Object, Object, LinkedHashTreeMap<Object, String>> biFunction0 = (BiFunction<Object, Object, LinkedHashTreeMap<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.replaceAll(biFunction0);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-3328));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer0);
      Integer.getInteger("com.google.gson.internal.LinkedHashTreeMap$EntrySet", integer0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>((LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>) null, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer>();
      linkedHashTreeMap_Node2.prev = linkedHashTreeMap_Node3;
      Map.Entry.comparingByKey();
      linkedHashTreeMap_Node2.first();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Integer>(comparator1);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Integer>(comparator2);
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node4 = linkedHashTreeMap1.header;
      linkedHashTreeMap_Node4.getValue();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedHashTreeMap_Node2, abstractMap_SimpleEntry0, 0, linkedHashTreeMap_Node0, linkedHashTreeMap_Node2);
      linkedHashTreeMap_Node3.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node3);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = linkedHashTreeMap_Node5.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node6, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node5, linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node7.equals(linkedHashTreeMap_Node6);
      linkedHashTreeMap_Node7.setValue(linkedHashTreeMap_Node5);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      linkedHashTreeMap_EntrySet0.clear();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node9 = linkedHashTreeMap_Node8.last();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_Node10 = new LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, Integer>(linkedHashTreeMap_Node9, linkedHashTreeMap3, (-2674), linkedHashTreeMap_Node8, linkedHashTreeMap_Node9);
      linkedHashTreeMap_AvlBuilder1.add(linkedHashTreeMap_Node10);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 6);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node11 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node12 = linkedHashTreeMap_Node11.first();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node13 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node12, "9I^FDJ/Jz", (-561), linkedHashTreeMap_Node12, linkedHashTreeMap_Node12);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node14 = linkedHashTreeMap_Node13.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node14;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node15 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node15;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node16 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_NodeArray0[0], "9I^FDJ/Jz", 0, linkedHashTreeMap_Node12, linkedHashTreeMap_Node15);
      linkedHashTreeMap_NodeArray0[2] = linkedHashTreeMap_Node16;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node17 = linkedHashTreeMap_Node14.first();
      linkedHashTreeMap_NodeArray0[3] = linkedHashTreeMap_Node17;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node18 = linkedHashTreeMap_Node14.last();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node19 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node18, "9I^FDJ/Jz", 3, linkedHashTreeMap_Node14, linkedHashTreeMap_Node17);
      linkedHashTreeMap_NodeArray0[4] = linkedHashTreeMap_Node19;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node20 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node18, "9I^FDJ/Jz", (-4961), linkedHashTreeMap_Node16, linkedHashTreeMap_Node15);
      linkedHashTreeMap_NodeArray0[5] = linkedHashTreeMap_Node20;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray1 = LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
      assertEquals(12, linkedHashTreeMap_NodeArray1.length);
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      LinkedHashTreeMap.Node<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap_Node4 = linkedHashTreeMap0.findByObject("PS^2l;\"");
      assertNull(linkedHashTreeMap_Node4);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>(comparator0);
      linkedHashTreeMap0.size();
      LinkedHashTreeMap<Integer, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>();
      linkedHashTreeMap1.entrySet();
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Integer>();
      LinkedHashTreeMap.Node<Object, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.next;
      linkedHashTreeMap_Node0.height = 3;
      linkedHashTreeMap2.removeInternal(linkedHashTreeMap_Node1, false);
      linkedHashTreeMap2.keySet();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>(comparator1);
      linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap3);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<String, Object>> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, AbstractMap.SimpleEntry<String, Object>>(comparator2);
      linkedHashTreeMap4.entrySet();
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Object, Integer>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleImmutableEntry<Object, Integer>, Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_AvlBuilder0.root();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap$AvlBuilder", e);
      }
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer integer0 = Integer.valueOf((-1));
      Integer.toUnsignedLong(0);
      linkedHashTreeMap0.putIfAbsent(integer0, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      Integer integer1 = new Integer(0);
      Integer.sum(0, (-1));
      Integer integer2 = new Integer((-1));
      Integer.toUnsignedLong(0);
      Integer.toUnsignedLong((-1));
      Integer.getInteger((String) null, integer2);
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      int int0 = linkedHashTreeMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      String string0 = "";
      Integer.getInteger("");
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find((Integer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>(comparator0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap2 = linkedHashTreeMap_Node0.setValue(linkedHashTreeMap1);
      assertNull(linkedHashTreeMap2);
      
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Integer>();
      boolean boolean0 = linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap3.clear();
      assertEquals(0, linkedHashTreeMap3.size());
      
      LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, String>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap4.comparator = comparator1;
      Set<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>> set0 = linkedHashTreeMap4.keySet();
      assertNotNull(set0);
      assertEquals(0, linkedHashTreeMap4.size());
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Integer, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Integer, String>>(comparator0);
      linkedHashTreeMap0.keySet();
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, Integer>();
      linkedHashTreeMap_Node0.next = linkedHashTreeMap_Node1;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator1);
      linkedHashTreeMap0.entrySet();
      linkedHashTreeMap_Node0.prev = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node0.next = linkedHashTreeMap_Node1;
      linkedHashTreeMap_Node0.equals(linkedHashTreeMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      // Undeclared exception!
      try { 
        linkedHashTreeMap_KeySet1.add(linkedHashTreeMap_Node0.prev);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>(comparator0);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, Object>();
      linkedHashTreeMap_Node0.height = 1;
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
      linkedHashTreeMap_Node0.value = (Object) linkedHashTreeMap0;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong((-1));
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer(2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, 2, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer(1146);
      Integer integer3 = new Integer((-1));
      linkedHashTreeMap0.putIfAbsent(integer3, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      Integer integer4 = new Integer((-1144));
      Integer.sum(778, 7);
      Integer integer5 = new Integer(778);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap1.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap3 = new LinkedHashTreeMap<Object, String>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap4.putAll(linkedHashTreeMap0);
      assertEquals(1, linkedHashTreeMap0.size());
      assertEquals(2, linkedHashTreeMap4.size());
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      linkedHashTreeMap0.removeInternal(linkedHashTreeMap_Node1, true);
      assertEquals((-1), linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<Integer, String> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Integer, String>();
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, String>();
      Integer integer0 = new Integer(0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1656), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node1);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_AvlIterator0.next();
      assertNotNull(linkedHashTreeMap_Node2);
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      LinkedHashTreeMap<String, String> linkedHashTreeMap1 = new LinkedHashTreeMap<String, String>();
      linkedHashTreeMap0.get(linkedHashTreeMap1);
      linkedHashTreeMap0.keySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, Integer> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.first();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Object, Object>(comparator1);
      linkedHashTreeMap2.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node3 = null;
      try {
        linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Object, Object>((LinkedHashTreeMap.Node<Object, Object>) null, (Object) null, (-263), (LinkedHashTreeMap.Node<Object, Object>) null, (LinkedHashTreeMap.Node<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 3);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node3 = linkedHashTreeMap_Node2.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node3;
      String string0 = "";
      linkedHashTreeMap_Node2.left = linkedHashTreeMap_Node3;
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>> linkedHashTreeMap_Node4 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>(linkedHashTreeMap_Node2, "", 8, linkedHashTreeMap_NodeArray0[0], linkedHashTreeMap_NodeArray0[0]);
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap_Node3.last();
      // Undeclared exception!
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) linkedHashTreeMap_NodeArray0);
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlIterator<String, Integer> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer integer0 = Integer.valueOf((-1));
      Integer.toUnsignedLong(0);
      linkedHashTreeMap0.putIfAbsent(integer0, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      Integer integer1 = new Integer(0);
      Integer.sum(0, (-1));
      Integer integer2 = new Integer((-1));
      Integer.toUnsignedLong(0);
      Integer.toUnsignedLong(0);
      Integer integer3 = Integer.getInteger((String) null, integer2);
      linkedHashTreeMap0.find(integer1, true);
      assertEquals(2, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>((Comparator<? super String>) null);
      linkedHashTreeMap1.removeInternalByKey(integer3);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap2.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap3.new KeySet();
      linkedHashTreeMap_KeySet0.clear();
      assertEquals(0, linkedHashTreeMap3.size());
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer.toUnsignedLong((-1));
      LinkedHashTreeMap.Node<Integer, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<Integer, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node0 = linkedHashTreeMap0.header;
      Integer integer0 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer0, (-1), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_NodeArray0[0] = linkedHashTreeMap_Node2;
      Integer integer1 = new Integer((-1));
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, String>(linkedHashTreeMap_Node0, integer1, (-1), linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<Integer, String> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.last();
      linkedHashTreeMap_Node3.value = "G;O)<H@IlFV<5EdNug";
      linkedHashTreeMap_NodeArray0[1] = linkedHashTreeMap_Node4;
      linkedHashTreeMap0.table = linkedHashTreeMap_NodeArray0;
      Integer integer2 = new Integer((-1144));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1144));
      Integer.toUnsignedLong(14);
      Integer integer5 = new Integer(0);
      Integer.getInteger("", integer5);
      Integer integer6 = new Integer(778);
      linkedHashTreeMap0.find(integer6, true);
      assertEquals(1, linkedHashTreeMap0.size());
      
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, Map.Entry<String, Integer>> linkedHashTreeMap0 = new LinkedHashTreeMap<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>, Map.Entry<String, Integer>>();
      Integer integer0 = new Integer(1783);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("0~+kIP#B|[D_Qh", integer0);
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.put((Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Object>) null, abstractMap_SimpleEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, String> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleEntry<Object, Object>, String>(comparator0);
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node1);
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>>)linkedHashTreeMap0.entrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashTreeMap0.entrySet();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, Object>(comparator1);
      linkedHashTreeMap0.findByObject(linkedHashTreeMap1);
      LinkedHashTreeMap<Comparable<Integer>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Comparable<Integer>, Object>();
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<String>> linkedHashTreeMap3 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<String>>();
      linkedHashTreeMap3.get((Object) null);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap4 = new LinkedHashTreeMap<String, AbstractMap.SimpleEntry<Object, Object>>(comparator2);
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap_Node2 = linkedHashTreeMap4.removeInternalByKey(set0);
      assertNull(linkedHashTreeMap_Node2);
      
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap5 = new LinkedHashTreeMap<Object, String>(comparator3);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap5.new EntrySet();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      linkedHashTreeMap0.remove((Object) "");
      // Undeclared exception!
      try { 
        LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<LinkedHashTreeMap<Integer, Object>, String>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleEntry<String, Integer>>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>(comparator1);
      linkedHashTreeMap1.remove((Object) linkedHashTreeMap_Node0);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap0.new EntrySet();
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      linkedHashTreeMap_Node0.height = (-1995);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.root();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator1);
      linkedHashTreeMap0.find(linkedHashTreeMap_AvlBuilder0, true);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      LinkedHashTreeMap<String, String> linkedHashTreeMap0 = new LinkedHashTreeMap<String, String>();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      boolean boolean0 = linkedHashTreeMap_KeySet0.contains((Object) null);
      assertEquals(0, linkedHashTreeMap_KeySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      LinkedHashTreeMap.AvlIterator<String, Integer> linkedHashTreeMap_AvlIterator1 = new LinkedHashTreeMap.AvlIterator<String, Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(comparator0);
      linkedHashTreeMap0.findByEntry(linkedHashTreeMap_Node0);
      LinkedHashTreeMap<Object, String> linkedHashTreeMap1 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap1.putAll(linkedHashTreeMap0);
      int int0 = linkedHashTreeMap1.size();
      assertEquals(0, int0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<Integer, Object>(comparator1);
      linkedHashTreeMap2.remove((Object) null);
      assertEquals(0, linkedHashTreeMap2.size());
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<Object, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<Object, Object>>(comparator0);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      linkedHashTreeMap_Node0.value = (Object) integer0;
      Map.Entry.comparingByKey((Comparator<? super LinkedHashTreeMap<String, Integer>>) comparator1);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap0.remove((Object) linkedHashTreeMap_Node1);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.iterator();
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet1 = linkedHashTreeMap0.new KeySet();
      int int0 = linkedHashTreeMap_KeySet1.size();
      assertEquals(0, int0);
      
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<Integer, Object>((Comparator<? super Integer>) null);
      linkedHashTreeMap1.clear();
      assertEquals(0, linkedHashTreeMap1.size());
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node0);
      linkedHashTreeMap_AvlBuilder0.root();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>(comparator1);
      linkedHashTreeMap0.find(linkedHashTreeMap_AvlBuilder0, true);
      assertEquals(1, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.reset(264);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>> linkedHashTreeMap0 = new LinkedHashTreeMap<Comparable<Object>, LinkedHashTreeMap<String, Object>>();
      linkedHashTreeMap0.findByObject(linkedHashTreeMap_AvlBuilder0);
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, String>, LinkedHashTreeMap<String, String>>();
      linkedHashTreeMap_AvlIterator0.reset(linkedHashTreeMap_Node0);
      linkedHashTreeMap_Node0.toString();
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.find(linkedHashTreeMap_Node0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedHashTreeMap$Node is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedHashTreeMap", e);
      }
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>(linkedHashTreeMap_Node0, linkedHashTreeMap_Node0, (-41), linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = linkedHashTreeMap_Node1.getValue();
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 100000)
  public void test106()  throws Throwable  {
      LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, LinkedHashTreeMap<Object, String>>();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>();
      Integer integer0 = new Integer(6);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer0, 6, linkedHashTreeMap_Node0, linkedHashTreeMap_Node0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(linkedHashTreeMap_Node0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      linkedHashTreeMap_Node0.equals(abstractMap_SimpleEntry1);
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node2 = linkedHashTreeMap_Node1.last();
      LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<Integer, LinkedHashTreeMap<Object, String>>(linkedHashTreeMap_Node0, integer0, 6, linkedHashTreeMap_Node1, linkedHashTreeMap_Node2);
      LinkedHashTreeMap.AvlIterator<Object, Object> linkedHashTreeMap_AvlIterator0 = new LinkedHashTreeMap.AvlIterator<Object, Object>();
      LinkedHashTreeMap.Node<Object, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_AvlIterator0.next();
      assertNull(linkedHashTreeMap_Node4);
  }

  @Test(timeout = 100000)
  public void test107()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, AbstractMap.SimpleEntry<Object, String>>();
      LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<String, AbstractMap.SimpleEntry<Object, String>>();
      linkedHashTreeMap_AvlBuilder0.add(linkedHashTreeMap_Node1);
      boolean boolean0 = linkedHashTreeMap_Node0.equals(linkedHashTreeMap_AvlBuilder0);
      assertFalse(boolean0);
      
      LinkedHashTreeMap<Object, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Object>();
      linkedHashTreeMap0.clear();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test108()  throws Throwable  {
      LinkedHashTreeMap<Object, Integer> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, Integer>();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node1 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      boolean boolean0 = linkedHashTreeMap_EntrySet0.remove(linkedHashTreeMap1);
      assertEquals(0, linkedHashTreeMap_EntrySet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 100000)
  public void test109()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      Integer integer0 = new Integer((-1));
      linkedHashTreeMap0.put(integer0, integer0);
      LinkedHashTreeMap.AvlBuilder<String, String> linkedHashTreeMap_AvlBuilder0 = new LinkedHashTreeMap.AvlBuilder<String, String>();
      linkedHashTreeMap_AvlBuilder0.reset((-561));
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      linkedHashTreeMap_Node1.last();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedHashTreeMap_AvlBuilder0, (Object) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> linkedHashTreeMap_Node2 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      linkedHashTreeMap_Node2.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> linkedHashTreeMap1 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(comparator1);
      linkedHashTreeMap1.findByEntry(linkedHashTreeMap_Node2);
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node3 = new LinkedHashTreeMap.Node<String, Object>();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node4 = linkedHashTreeMap_Node3.first();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node5 = linkedHashTreeMap_Node4.last();
      Map.Entry.comparingByValue();
      LinkedHashTreeMap.Node<String, Object> linkedHashTreeMap_Node6 = new LinkedHashTreeMap.Node<String, Object>(linkedHashTreeMap_Node5, "9I^FDJ/Jz", 0, linkedHashTreeMap_Node4, linkedHashTreeMap_Node4);
      linkedHashTreeMap_Node6.equals(linkedHashTreeMap_Node5);
      linkedHashTreeMap_Node6.setValue(linkedHashTreeMap_Node4);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<String, String>>) null);
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet0 = linkedHashTreeMap1.new EntrySet();
      LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer> linkedHashTreeMap_AvlBuilder1 = new LinkedHashTreeMap.AvlBuilder<LinkedHashTreeMap<Object, Object>, Integer>();
      LinkedHashTreeMap.EntrySet linkedHashTreeMap_EntrySet1 = linkedHashTreeMap0.new EntrySet();
      linkedHashTreeMap_EntrySet1.contains("");
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap0.new KeySet();
      linkedHashTreeMap_KeySet0.remove("");
      LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> linkedHashTreeMap3 = new LinkedHashTreeMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>((Comparator<? super Integer>) null);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node7 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      Integer integer1 = new Integer((-561));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, linkedHashTreeMap_Node5);
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object> linkedHashTreeMap_Node8 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Integer, Object>, Object>(linkedHashTreeMap_Node7, abstractMap_SimpleEntry1, (-561), linkedHashTreeMap_Node7, linkedHashTreeMap_Node7);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = linkedHashTreeMap3.remove((Object) linkedHashTreeMap_Node8);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 100000)
  public void test110()  throws Throwable  {
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, String> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, String>();
      LinkedHashTreeMap.Node<AbstractMap.SimpleEntry<Object, Object>, String> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.first();
      String string0 = linkedHashTreeMap_Node1.setValue("fJyWp");
      assertNull(string0);
  }

  @Test(timeout = 100000)
  public void test111()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Object, String>();
      assertEquals(0, linkedHashTreeMap0.size());
  }

  @Test(timeout = 100000)
  public void test112()  throws Throwable  {
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node0 = new LinkedHashTreeMap.Node<Integer, Integer>();
      LinkedHashTreeMap.Node<Integer, Integer> linkedHashTreeMap_Node1 = linkedHashTreeMap_Node0.last();
      linkedHashTreeMap_Node1.equals(linkedHashTreeMap_Node0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<Integer, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, Object>(comparator0);
      LinkedHashTreeMap<String, Comparable<Integer>> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Comparable<Integer>>();
      LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String>[] linkedHashTreeMap_NodeArray0 = (LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String>[]) Array.newInstance(LinkedHashTreeMap.Node.class, 0);
      LinkedHashTreeMap.doubleCapacity((LinkedHashTreeMap.Node<LinkedHashTreeMap<Object, Object>, String>[]) linkedHashTreeMap_NodeArray0);
      Object object0 = linkedHashTreeMap1.remove((Object) linkedHashTreeMap_Node0);
      assertNull(object0);
  }

  @Test(timeout = 100000)
  public void test113()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashTreeMap<String, Object> linkedHashTreeMap0 = new LinkedHashTreeMap<String, Object>(comparator0);
      linkedHashTreeMap0.table = null;
      // Undeclared exception!
      try { 
        linkedHashTreeMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 100000)
  public void test114()  throws Throwable  {
      LinkedHashTreeMap<Integer, String> linkedHashTreeMap0 = new LinkedHashTreeMap<Integer, String>((Comparator<? super Integer>) null);
      Integer integer0 = Integer.valueOf((-1));
      linkedHashTreeMap0.putIfAbsent(integer0, "com.google.gson.internal.LinkedHashTreeMap$AvlBuilder");
      Integer integer1 = new Integer(0);
      Integer.sum(0, (-1));
      Integer integer2 = new Integer((-1));
      Integer.toUnsignedLong(0);
      Integer.toUnsignedLong(0);
      Integer integer3 = Integer.getInteger((String) null, integer2);
      linkedHashTreeMap0.find(integer1, true);
      LinkedHashTreeMap<String, Integer> linkedHashTreeMap1 = new LinkedHashTreeMap<String, Integer>((Comparator<? super String>) null);
      linkedHashTreeMap1.removeInternalByKey(integer3);
      LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> linkedHashTreeMap2 = new LinkedHashTreeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      linkedHashTreeMap2.size();
      LinkedHashTreeMap<String, Object> linkedHashTreeMap3 = new LinkedHashTreeMap<String, Object>();
      LinkedHashTreeMap<Object, String> linkedHashTreeMap4 = new LinkedHashTreeMap<Object, String>();
      linkedHashTreeMap4.putAll(linkedHashTreeMap0);
      LinkedHashTreeMap.KeySet linkedHashTreeMap_KeySet0 = linkedHashTreeMap4.new KeySet();
      linkedHashTreeMap_KeySet0.remove(linkedHashTreeMap2);
      linkedHashTreeMap0.remove((Object) "com.google.gson.internal.LinkedHashTreeMap$AvlIterator");
      assertEquals(2, linkedHashTreeMap0.size());
  }
}
