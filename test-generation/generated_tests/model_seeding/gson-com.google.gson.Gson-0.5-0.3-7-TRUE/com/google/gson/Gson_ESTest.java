/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 11:57:34 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonPrimitive;
import com.google.gson.ParameterizedTypeFixtures;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.Date;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Class<Object> class0 = Object.class;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("pJrocJIAM");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      
      JsonWriter jsonWriter3 = jsonWriter1.value(0.0);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter0);
      assertNotNull(jsonWriter3);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("{\"pJrocJIAM\":0.0", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      
      jsonWriter3.setHtmlSafe(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter2);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter0);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("{\"pJrocJIAM\":0.0", charArrayWriter0.toString());
      assertTrue(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter3.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Type) class0, jsonWriter3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Class<Object> class0 = Object.class;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.beginObject();
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      JsonWriter jsonWriter2 = jsonWriter1.name("pJrocJIAM");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter2, jsonWriter1);
      assertSame(jsonWriter2, jsonWriter0);
      assertNotNull(jsonWriter2);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("{", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter2.getSerializeNulls());
      assertFalse(jsonWriter2.isHtmlSafe());
      assertFalse(jsonWriter2.isLenient());
      
      JsonWriter jsonWriter3 = jsonWriter1.value(0.0);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertNotNull(jsonWriter3);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("{\"pJrocJIAM\":0.0", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      
      jsonWriter3.setLenient(true);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter0, jsonWriter2);
      assertSame(jsonWriter0, jsonWriter3);
      assertSame(jsonWriter1, jsonWriter0);
      assertSame(jsonWriter1, jsonWriter2);
      assertSame(jsonWriter1, jsonWriter3);
      assertSame(jsonWriter3, jsonWriter0);
      assertSame(jsonWriter3, jsonWriter1);
      assertSame(jsonWriter3, jsonWriter2);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("{\"pJrocJIAM\":0.0", charArrayWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertTrue(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertTrue(jsonWriter1.isLenient());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(jsonWriter3.isHtmlSafe());
      assertTrue(jsonWriter3.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigDecimal0, (Type) class0, jsonWriter3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      StringWriter stringWriter0 = new StringWriter(9);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      gson0.toJson((Object) null, (Type) class0, (Appendable) stringWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      gson0.toJson((JsonElement) null, (Appendable) charArrayWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(4, charArrayWriter0.size());
      assertEquals("null", charArrayWriter0.toString());
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonObject());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*C&Z.-\"B1Sh9");
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      assertNotNull(jsonWriter0);
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      gson0.toJson(jsonElement0, jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonObject());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson("8^|.ZI*z8QbTXM", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      try { 
        gson0.fromJson("W6sWE%4SpVN5]", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 14 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Class<Object> class0 = Object.class;
      JsonElement jsonElement0 = gson0.toJsonTree((Object) charArrayWriter0, (Type) class0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonNull());
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 100000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(4);
      assertNotNull(atomicLongArray0);
      assertEquals("[0, 0, 0, 0]", atomicLongArray0.toString());
      assertEquals(4, atomicLongArray0.length());
      
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicLongArray0, (Type) class0);
      assertNotNull(jsonArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("[0, 0, 0, 0]", atomicLongArray0.toString());
      assertEquals(4, atomicLongArray0.length());
      assertFalse(jsonArray0.isEmpty());
      assertEquals(4, jsonArray0.size());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonPrimitive());
  }

  @Test(timeout = 100000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) charArrayWriter0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 100000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      long[] longArray0 = new long[9];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      assertNotNull(atomicLongArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, atomicLongArray0.length());
      assertEquals("[0, 0, 0, 0, 0, 0, 0, 0, 0]", atomicLongArray0.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      JsonArray jsonArray0 = (JsonArray)gson0.toJsonTree((Object) atomicLongArray0);
      assertNotNull(jsonArray0);
      assertEquals(9, longArray0.length);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(9, atomicLongArray0.length());
      assertEquals("[0, 0, 0, 0, 0, 0, 0, 0, 0]", atomicLongArray0.toString());
      assertEquals(9, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonObject());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 100000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Integer integer0 = new Integer(43);
      assertEquals(43, (int)integer0);
      assertNotNull(integer0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Object> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      
      String string0 = gson0.toJson((Object) integer0, (Type) class1);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 100000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Object object0 = gson0.fromJson("com.google.gson.Gson$1", (Type) class0);
      assertEquals("com.google.gson.Gson$1", object0);
      assertNotNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = gson0.fromJson("", class0);
      assertNull(defaultDateTypeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("0w", class0);
      assertEquals("0w", string0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      
      BigDecimal bigDecimal0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(bigDecimal0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
  }

  @Test(timeout = 100000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Excluder> class0 = Excluder.class;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Excluder excluder0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      Class<AtomicLong> class0 = AtomicLong.class;
      AtomicLong atomicLong0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertNotNull(atomicLong0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
  }

  @Test(timeout = 100000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Boolean
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$3", e);
      }
  }

  @Test(timeout = 100000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Float> class0 = Float.class;
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "4", (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 100000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((Object) short0, (Type) class0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.Excluder cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super DefaultDateTypeAdapter> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.google.gson.DefaultDateTypeAdapter", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "null", (Type) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test28()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      long[] longArray0 = new long[2];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      assertNotNull(atomicLongArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, atomicLongArray0.length());
      assertEquals("[0, 0]", atomicLongArray0.toString());
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(44, charBuffer0.remaining());
      assertEquals(44, charBuffer0.capacity());
      assertEquals(44, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(44, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((Object) null, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test32()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((JsonElement) null, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test33()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("GSON (2.8.7-SNAPSHOT) cannot handle ");
      assertNotNull(mockFileWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      JsonWriter jsonWriter1 = jsonWriter0.name("");
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertNotNull(jsonWriter1);
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertFalse(jsonWriter1.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test34()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      assertNotNull(jsonNull0);
      assertTrue(jsonNull0.isJsonNull());
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonArray());
      assertFalse(jsonNull0.isJsonPrimitive());
      
      try { 
        gson0.toJson((JsonElement) jsonNull0, jsonWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test35()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("Cg|#*T=<qFJVMA4XQ", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test36()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("GRa8v,dZ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test37()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("^cL!>S|L~:?o4.|", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test38()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("com.google.gson.internal.bind.TypeAdapters$2");
      assertNotNull(stringReader0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test39()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test40()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("pyv9e\"o:VZu7");
      assertNotNull(stringReader0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test41()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<Date> class0 = Date.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test42()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Type> class0 = Type.class;
      StringReader stringReader0 = new StringReader("N\">(:D");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test43()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("sIU,by]h@&?i_.#");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test44()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test45()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringReader stringReader0 = new StringReader("flo`BSV ,AlF=");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test46()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test47()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      assertEquals(0, jsonArray0.size());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test48()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Short> class0 = Short.class;
      TypeToken<Short> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super Short> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Short", class1.toString());
      
      Integer integer0 = gson0.fromJson((JsonElement) null, (Type) class1);
      assertNull(integer0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Short", class1.toString());
  }

  @Test(timeout = 100000)
  public void test49()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(" at path ");
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expecting character, got:  at path 
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$15", e);
      }
  }

  @Test(timeout = 100000)
  public void test50()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Byte byte0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertNull(byte0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 100000)
  public void test51()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      BigInteger bigInteger0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(bigInteger0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 100000)
  public void test52()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(mockPrintWriter0);
      assertNotNull(jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 100000)
  public void test53()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test54()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class0 = Object.class;
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) byte0, (Type) class0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test55()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test56()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Short short0 = new Short((short) (-563));
      assertEquals((short) (-563), (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) short0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test57()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test58()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test59()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Excluder> class0 = Excluder.class;
      TypeAdapter<Excluder> typeAdapter0 = gson0.getAdapter(class0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test60()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) charArrayWriter0, (Type) null, (Appendable) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test61()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test62()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test63()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Double) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test64()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      String string0 = gson_FutureTypeAdapter0.toJson((Double) null);
      assertEquals("null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 100000)
  public void test65()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test66()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      assertNotNull(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test67()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test68()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test69()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<ParameterizedTypeFixtures.MyParameterizedTypeInstanceCreator<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test70()  throws Throwable  {
      Gson gson0 = new Gson();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("AssertionError (GSON 2.8.7-SNAPSHOT): ");
      // Undeclared exception!
      gson0.toJson((Object) mockPrintWriter0);
  }

  @Test(timeout = 100000)
  public void test71()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test72()  throws Throwable  {
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long[] longArray0 = new long[10];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJson((Object) atomicLongArray0, (Appendable) charArrayWriter0);
      assertEquals(261, charArrayWriter0.size());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test73()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(1642.0628682852973);
      gson0.toJson((Object) float0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test74()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Gson gson0 = new Gson();
      gson0.fromJson("null", (Type) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test75()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("|=zt!&ZI|zsu9j&mO", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test76()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test77()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Double> class0 = Double.class;
      gson0.fromJson((JsonElement) jsonNull0, class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test78()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray(3204);
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test79()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(169L);
      gson0.toJsonTree((Object) atomicLong0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test80()  throws Throwable  {
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertFalse(gson0.serializeNulls());
      assertNotNull(fieldNamingStrategy0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test81()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test82()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      gson0.toJson((Object) excluder0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test83()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertFalse(gson0.serializeNulls());
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test84()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test85()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson((String) null, (Class<Float>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test86()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test87()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: boolean. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test88()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test89()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      StringWriter stringWriter0 = new StringWriter(1);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      gson0.toJson((Object) gson_FutureTypeAdapter0, (Type) class0, jsonWriter0);
      assertEquals("{}", stringWriter0.toString());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 100000)
  public void test90()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      String string0 = gson0.toJson(jsonElement0);
      assertEquals("null", string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test91()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertTrue(gson0.htmlSafe());
      assertFalse(boolean0);
  }
}
