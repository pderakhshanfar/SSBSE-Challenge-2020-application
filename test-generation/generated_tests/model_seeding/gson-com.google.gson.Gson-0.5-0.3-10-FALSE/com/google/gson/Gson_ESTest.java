/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 09 13:58:33 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.time.chrono.ChronoLocalDate;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonWriter0).getSerializeNulls();
      doReturn(true).when(jsonWriter0).isHtmlSafe();
      doReturn(false).when(jsonWriter0).isLenient();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonWriter0).getSerializeNulls();
      doReturn(true).when(jsonWriter0).isHtmlSafe();
      doReturn(true).when(jsonWriter0).isLenient();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Type) class0, jsonWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class<? super AtomicLong> class1 = typeToken0.getRawType();
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.util.concurrent.atomic.AtomicLong", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("c>#cS*AQ~)K7O[", true);
      assertNotNull(mockFileWriter0);
      
      gson0.toJson((Object) null, (Type) class1, (Appendable) mockFileWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.util.concurrent.atomic.AtomicLong", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 100000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      gson0.toJson((Object) bigInteger0, (Type) class0, jsonWriter0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(31, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 100000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("hrg[[&3PU(");
      assertNotNull(mockPrintStream0);
      
      gson0.toJson((JsonElement) jsonObject0, (Appendable) mockPrintStream0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 100000)
  public void test005()  throws Throwable  {
      Gson.checkValidFloatingPoint(545.79137192);
  }

  @Test(timeout = 100000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long(42L);
      assertEquals(42L, (long)long0);
      assertNotNull(long0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)longSerializationPolicy0.serialize(long0);
      assertNotNull(jsonPrimitive0);
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      
      Class<AtomicLong> class0 = AtomicLong.class;
      AtomicLong atomicLong0 = gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      assertNotNull(atomicLong0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isBoolean());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertEquals((byte)42, atomicLong0.byteValue());
      assertEquals(42L, atomicLong0.longValue());
      assertEquals(42, atomicLong0.intValue());
      assertEquals((short)42, atomicLong0.shortValue());
      assertEquals(42.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(42L, atomicLong0.get());
      assertEquals("42", atomicLong0.toString());
      assertEquals(42.0, atomicLong0.doubleValue(), 0.01);
  }

  @Test(timeout = 100000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) "5I'>i)F3Lwl", (Type) class0);
      assertNotNull(jsonPrimitive0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
      
      gson0.toJson((JsonElement) jsonPrimitive0, jsonWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isNumber());
      assertTrue(jsonPrimitive0.isString());
      assertEquals(24, charArrayWriter0.size());
      assertEquals("\"5I\\u0027\\u003ei)F3Lwl\"", charArrayWriter0.toString());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 100000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      MockDate mockDate0 = new MockDate((byte) (-123), (byte) (-123), (byte) (-123));
      assertNotNull(mockDate0);
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) mockDate0, (Type) class0);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("Fri May 30 00:00:00 GMT 1766", mockDate0.toString());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertTrue(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 100000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)gson0.toJsonTree((Object) bigInteger0);
      assertNotNull(jsonPrimitive0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonNull());
  }

  @Test(timeout = 100000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertNotNull(gsonBuilder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) gsonBuilder0);
      assertNotNull(jsonElement0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonElement0.isJsonArray());
      assertFalse(jsonElement0.isJsonPrimitive());
      assertFalse(jsonElement0.isJsonNull());
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 100000)
  public void test011()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonArray jsonArray1 = (JsonArray)gson0.toJsonTree((Object) jsonArray0);
      assertNotNull(jsonArray1);
      assertNotSame(jsonArray0, jsonArray1);
      assertNotSame(jsonArray1, jsonArray0);
      assertTrue(jsonArray1.equals((Object)jsonArray0));
      assertTrue(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertTrue(jsonArray1.isJsonArray());
      assertFalse(jsonArray1.isJsonObject());
      assertFalse(jsonArray1.isJsonPrimitive());
      assertFalse(jsonArray1.isJsonNull());
      assertTrue(jsonArray1.isEmpty());
      assertEquals(0, jsonArray1.size());
  }

  @Test(timeout = 100000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Double double0 = Double.valueOf(1190.62020973);
      assertEquals(1190.62020973, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      String string0 = gson0.toJson((Object) double0, (Type) class1);
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 100000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      assertNotNull(jsonNull0);
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(jsonNull0.isJsonArray());
      assertFalse(jsonNull0.isJsonObject());
      assertTrue(jsonNull0.isJsonNull());
      
      String string0 = gson0.toJson((JsonElement) jsonNull0);
      assertEquals("null", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(jsonNull0.isJsonArray());
      assertFalse(jsonNull0.isJsonObject());
      assertTrue(jsonNull0.isJsonNull());
  }

  @Test(timeout = 100000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Long> class0 = Long.class;
      Long long0 = gson0.fromJson("", class0);
      assertNull(long0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<MockDate> class0 = MockDate.class;
      MockDate mockDate0 = gson0.fromJson("{\"complexMapKeySerialization\":false,\"escapeHtmlChars\":true,\"generateNonExecutableJson\":false,\"lenient\":false,\"prettyPrinting\":false,\"serializeNulls\":false,\"serializeSpecialFloatingPointValues\":false,\"fieldNamingPolicy\":\"IDENTITY\",\"longSerializationPolicy\":\"DEFAULT\",\"excluder\":{\"requireExpose\":false,\"serializeInnerClasses\":true,\"version\":java.lang.Double@0000000196,\"modifiers\":java.lang.Integer@0000000201,\"deserializationStrategies\":[],\"serializationStrategies\":[]},\"dateStyle\":java.lang.Integer@0000000206,\"timeStyle\":java.lang.Integer@0000000209,\"factories\":[],\"hierarchyFactories\":[],\"instanceCreators\":{}}", class0);
      assertNotNull(mockDate0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 100000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader(")]}'\n");
      assertNotNull(stringReader0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Short short0 = gson0.fromJson((Reader) stringReader0, (Type) class0);
      assertNull(short0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 100000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((Reader) stringReader0, class0);
      assertNull(object0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test018()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = gson0.fromJson((JsonElement) jsonArray0, (Type) class0);
      assertNotNull(atomicLongArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
  }

  @Test(timeout = 100000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) bigInteger0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.util.concurrent.atomic.AtomicLongArray. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Type) class0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Long long0 = new Long((-922337203685477580L));
      assertEquals((-922337203685477580L), (long)long0);
      assertNotNull(long0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "h2t$L*:5N");
      assertNotNull(charBuffer0);
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("h2t$L*:5N", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Type) null, (Appendable) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) null, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      assertNotNull(jsonWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.name("");
      assertNotNull(jsonWriter1);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) short0, (Type) class0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class1, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: char. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Double double0 = new Double(1305.3392);
      assertEquals(1305.3392, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) double0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Double double0 = new Double((-276.130101034202));
      assertEquals((-276.130101034202), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<DefaultDateTypeAdapter> class0 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.google.gson.DefaultDateTypeAdapter", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(0, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) double0, (Type) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 100000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) charArrayWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Integer integer0 = new Integer(1074);
      assertEquals(1074, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) integer0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(2427);
      assertNotNull(atomicLongArray0);
      assertEquals(2427, atomicLongArray0.length());
      
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(2427, atomicLongArray0.length());
      
      // Undeclared exception!
      gson0.toJson((Object) string0);
  }

  @Test(timeout = 100000)
  public void test033()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: float. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 100000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Integer integer0 = new Integer(2384);
      assertEquals(2384, (int)integer0);
      assertNotNull(integer0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(integer0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer1.limit());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertEquals("\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      Long long0 = new Long(4935L);
      assertEquals(4935L, (long)long0);
      assertNotNull(long0);
      
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)longSerializationPolicy0.serialize(long0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertTrue(jsonPrimitive0.isNumber());
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonPrimitive0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 100000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(180);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      
      JsonWriter jsonWriter1 = jsonWriter0.name(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");
      assertNotNull(jsonWriter1);
      assertSame(jsonWriter0, jsonWriter1);
      assertSame(jsonWriter1, jsonWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertTrue(jsonWriter0.getSerializeNulls());
      assertFalse(jsonWriter1.isLenient());
      assertTrue(jsonWriter1.getSerializeNulls());
      assertFalse(jsonWriter1.isHtmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, jsonWriter1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(false).when(jsonElement0).isJsonObject();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Couldn't write class com.google.gson.JsonElement$MockitoMock$534298992
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 100000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<ChronoLocalDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 100000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("Z", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("|EH+Xw", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("3b7WyxZqrE^36|u5?", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("LZqB3F+Po+h1D-35", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.fromJson("3b7WyxZqrE^36|u5?", (Class<ChronoLocalDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("5gsy:dezp{_ gD");
      assertNotNull(stringReader0);
      
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.annotation.Annotation. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JsonReader jsonReader0 = gson0.newJsonReader(reader0);
      assertNotNull(jsonReader0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      gson0.fromJson(jsonReader0, (Type) class0);
  }

  @Test(timeout = 100000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("5vz8GO");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeToken<ChronoLocalDate> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1537, class1.getModifiers());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class1.toString());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      StringReader stringReader0 = new StringReader("eWbIS(ay0ub'");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("interface java.lang.reflect.Type", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      assertNotNull(jsonReader0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonReader0.isLenient());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Boolean boolean0 = Boolean.valueOf("u");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonObject());
      
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.annotation.Annotation. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray0.isEmpty());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isJsonArray());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 100000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 100000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isJsonArray());
      assertTrue(jsonArray0.isEmpty());
      assertEquals(0, jsonArray0.size());
      assertFalse(jsonArray0.isJsonObject());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 100000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)longSerializationPolicy0.serialize((Long) null);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isBoolean());
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Class<?>) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 100000)
  public void test058()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertTrue(jsonArray0.isJsonArray());
      assertEquals(0, jsonArray0.size());
      assertTrue(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertFalse(jsonArray0.isJsonObject());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test059()  throws Throwable  {
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
  }

  @Test(timeout = 100000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Byte byte0 = gson0.fromJson((JsonElement) null, (Type) class0);
      assertNull(byte0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 100000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      assertNotNull(jsonPrimitive0);
      assertFalse(jsonPrimitive0.isNumber());
      assertFalse(jsonPrimitive0.isString());
      assertFalse(jsonPrimitive0.isJsonNull());
      assertFalse(jsonPrimitive0.isJsonArray());
      assertTrue(jsonPrimitive0.isBoolean());
      assertFalse(jsonPrimitive0.isJsonObject());
      assertTrue(jsonPrimitive0.isJsonPrimitive());
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      JsonWriter jsonWriter0 = gson0.newJsonWriter(charArrayWriter0);
      assertNotNull(jsonWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertFalse(jsonWriter0.isHtmlSafe());
      assertFalse(jsonWriter0.isLenient());
      assertFalse(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 100000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(0);
      assertNotNull(atomicLongArray0);
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
      
      String string0 = gson0.toJson((Object) atomicLongArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(0, atomicLongArray0.length());
      assertEquals("[]", atomicLongArray0.toString());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<AtomicLongArray> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      TypeAdapter<AtomicLongArray> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test066()  throws Throwable  {
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.reflect.TypeToken cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test067()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      assertNotNull(jsonArray0);
      assertFalse(jsonArray0.isJsonPrimitive());
      assertFalse(jsonArray0.isJsonNull());
      assertTrue(jsonArray0.isEmpty());
      assertFalse(jsonArray0.isJsonObject());
      assertTrue(jsonArray0.isJsonArray());
      assertEquals(0, jsonArray0.size());
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 100000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn((JsonObject) null).when(jsonElement0).getAsJsonObject();
      doReturn(false).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(true).when(jsonElement0).isJsonObject();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 100000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonObject0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 100000)
  public void test072()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLong>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLong>>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Gson.FutureTypeAdapter<AtomicLong>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test073()  throws Throwable  {
      Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLong>> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Gson.FutureTypeAdapter<AtomicLong>>();
      assertNotNull(gson_FutureTypeAdapter0);
      
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 100000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      StringReader stringReader0 = new StringReader("_");
      assertNotNull(stringReader0);
      
      Class<Object> class0 = Object.class;
      Object object0 = gson0.fromJson((Reader) stringReader0, class0);
      assertEquals("_", object0);
      assertNotNull(object0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      BigInteger bigInteger0 = gson0.fromJson(jsonReader0, (Type) class0);
      assertNull(bigInteger0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 100000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      try { 
        gson0.fromJson("V;Obj", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      BigInteger bigInteger0 = gson0.fromJson(")]}'\n", (Type) class0);
      assertNull(bigInteger0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 100000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      BigInteger bigInteger0 = gson0.fromJson((String) null, (Type) class0);
      assertNull(bigInteger0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 100000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        gson0.toJson((Object) excluder0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      gson0.toJson((Object) null, (Appendable) charArrayWriter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertEquals(4, charArrayWriter0.size());
      assertEquals("null", charArrayWriter0.toString());
  }

  @Test(timeout = 100000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      JsonElement jsonElement0 = gson0.toJsonTree((Object) null);
      assertNotNull(jsonElement0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertFalse(jsonElement0.isJsonObject());
      assertFalse(jsonElement0.isJsonArray());
      assertTrue(jsonElement0.isJsonNull());
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 100000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = new Excluder();
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize double
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      TypeAdapter<Double> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertNotNull(typeAdapter0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 100000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedWriter0);
  }

  @Test(timeout = 100000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<AtomicLongArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35", e);
      }
  }

  @Test(timeout = 100000)
  public void test085()  throws Throwable  {
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add((Boolean) null);
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonArray0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(2401);
      String string0 = gson0.toJson((Object) atomicLongArray0);
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      Class<? super Object> class1 = typeToken0.getRawType();
      // Undeclared exception!
      gson0.fromJson(string0, (Type) class1);
  }

  @Test(timeout = 100000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test088()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(1.0);
      gson0.toJson((Object) float0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Class<?>) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("z>eM^,reDd;O,I", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 100000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.fromJson((JsonElement) jsonNull0, (Class<?>) class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      gson0.getAdapter(class0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(22L);
      gson0.toJson((Object) atomicLong0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      assertNotNull(excluder0);
  }

  @Test(timeout = 100000)
  public void test097()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 100000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson("8Hjyw!K3z|Q*M#ho<=", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"8Hjyw!K3z|Q*M\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 100000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 100000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0, (Type) class0, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.reflect.TypeToken cannot be cast to java.util.concurrent.atomic.AtomicLongArray
         //
         verifyException("com.google.gson.Gson$5", e);
      }
  }

  @Test(timeout = 100000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 100000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 100000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.serializeNulls();
      assertFalse(boolean0);
      assertTrue(gson0.htmlSafe());
  }
}
